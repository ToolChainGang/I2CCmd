
I2CCmd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003da  00800100  00000efc  00000f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000efc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  008004da  008004da  0000136a  2**0
                  ALLOC
  3 .noinit       0000005e  00800639  00800639  0000136a  2**0
                  ALLOC
  4 .debug_aranges 000000c0  00000000  00000000  0000136a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000265  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4d  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064a  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e05  00000000  00000000  00002a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  0000382c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d8  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000584  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_18>
  4c:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_19>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <__vector_24>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

00000068 <__c.1673>:
  68:	22 0d 0a 00                                         "...

0000006c <__c.1671>:
  6c:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d     Unrecognized Com
  7c:	6d 61 6e 64 20 22 00                                mand ".

00000083 <__c.1669>:
  83:	07 00                                               ..

00000085 <__c.1578>:
  85:	1b 5b 32 4a 00                                      .[2J.

0000008a <__c.1524>:
  8a:	1b 5b 4b 00                                         .[K.

0000008e <HexChars>:
  8e:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

0000009e <Divisors>:
  9e:	10 27 e8 03 64 00 0a 00                             .'..d...

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	14 e0       	ldi	r17, 0x04	; 4
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	ec ef       	ldi	r30, 0xFC	; 252
  ba:	fe e0       	ldi	r31, 0x0E	; 14
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <.do_copy_data_start>

000000be <.do_copy_data_loop>:
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0

000000c2 <.do_copy_data_start>:
  c2:	aa 3d       	cpi	r26, 0xDA	; 218
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <.do_copy_data_loop>

000000c8 <__do_clear_bss>:
  c8:	16 e0       	ldi	r17, 0x06	; 6
  ca:	aa ed       	ldi	r26, 0xDA	; 218
  cc:	b4 e0       	ldi	r27, 0x04	; 4
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a9 33       	cpi	r26, 0x39	; 57
  d4:	b1 07       	cpc	r27, r17
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  dc:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <ParseValue>:
// Inputs:      None (uses next token on command line)
//
// Outputs:     TRUE  if valid number token seen
//              FALSE if some problem
//
static bool ParseValue(void) {
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
    Token = ParseToken();
  ec:	0e 94 cf 05 	call	0xb9e	; 0xb9e <ParseToken>
  f0:	ec 01       	movw	r28, r24
  f2:	90 93 46 05 	sts	0x0546, r25
  f6:	80 93 45 05 	sts	0x0545, r24

    if( Token[0]          == '0' &&
  fa:	88 81       	ld	r24, Y
  fc:	80 33       	cpi	r24, 0x30	; 48
  fe:	61 f4       	brne	.+24     	; 0x118 <ParseValue+0x34>
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 69 07 	call	0xed2	; 0xed2 <tolower>
 108:	88 37       	cpi	r24, 0x78	; 120
 10a:	91 05       	cpc	r25, r1
 10c:	29 f4       	brne	.+10     	; 0x118 <ParseValue+0x34>
        tolower(Token[1]) == 'x' )
        Token += 2;
 10e:	22 96       	adiw	r28, 0x02	; 2
 110:	d0 93 46 05 	sts	0x0546, r29
 114:	c0 93 45 05 	sts	0x0545, r28

    //
    // For the time being, just do hex chars
    //
    if( strlen(Token) == 0 ||
 118:	c0 91 45 05 	lds	r28, 0x0545
 11c:	d0 91 46 05 	lds	r29, 0x0546
 120:	18 81       	ld	r17, Y
 122:	11 23       	and	r17, r17
 124:	09 f4       	brne	.+2      	; 0x128 <ParseValue+0x44>
 126:	40 c0       	rjmp	.+128    	; 0x1a8 <ParseValue+0xc4>
 128:	fe 01       	movw	r30, r28
 12a:	01 90       	ld	r0, Z+
 12c:	00 20       	and	r0, r0
 12e:	e9 f7       	brne	.-6      	; 0x12a <ParseValue+0x46>
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	ec 1b       	sub	r30, r28
 134:	fd 0b       	sbc	r31, r29
 136:	33 97       	sbiw	r30, 0x03	; 3
 138:	b8 f5       	brcc	.+110    	; 0x1a8 <ParseValue+0xc4>
        strlen(Token)  > 2   )
        return false;

    if( !isxdigit(Token[0]) )
 13a:	81 2f       	mov	r24, r17
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 5e 07 	call	0xebc	; 0xebc <isxdigit>
 142:	89 2b       	or	r24, r25
 144:	89 f1       	breq	.+98     	; 0x1a8 <ParseValue+0xc4>
        return false;

    Value = toupper(Token[0]) > '9' ? toupper(Token[0]) - 'A' + 10 : Token[0] - '0';
 146:	81 2f       	mov	r24, r17
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 71 07 	call	0xee2	; 0xee2 <toupper>
 14e:	8a 33       	cpi	r24, 0x3A	; 58
 150:	91 05       	cpc	r25, r1
 152:	1c f0       	brlt	.+6      	; 0x15a <ParseValue+0x76>
 154:	18 2f       	mov	r17, r24
 156:	17 53       	subi	r17, 0x37	; 55
 158:	01 c0       	rjmp	.+2      	; 0x15c <ParseValue+0x78>
 15a:	10 53       	subi	r17, 0x30	; 48
 15c:	10 93 41 05 	sts	0x0541, r17

    if( strlen(Token) == 1 )
 160:	fe 01       	movw	r30, r28
 162:	01 90       	ld	r0, Z+
 164:	00 20       	and	r0, r0
 166:	e9 f7       	brne	.-6      	; 0x162 <ParseValue+0x7e>
 168:	32 97       	sbiw	r30, 0x02	; 2
 16a:	ec 17       	cp	r30, r28
 16c:	fd 07       	cpc	r31, r29
 16e:	d1 f0       	breq	.+52     	; 0x1a4 <ParseValue+0xc0>
        return true;

    if( !isxdigit(Token[1]) )
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 5e 07 	call	0xebc	; 0xebc <isxdigit>
 178:	89 2b       	or	r24, r25
 17a:	b1 f0       	breq	.+44     	; 0x1a8 <ParseValue+0xc4>
        return false;

    Value <<= 4;
 17c:	01 2f       	mov	r16, r17
 17e:	02 95       	swap	r16
 180:	00 7f       	andi	r16, 0xF0	; 240
 182:	00 93 41 05 	sts	0x0541, r16
    Value += toupper(Token[1]) > '9' ? toupper(Token[1]) - 'A' + 10 : Token[1] - '0';
 186:	19 81       	ldd	r17, Y+1	; 0x01
 188:	81 2f       	mov	r24, r17
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 71 07 	call	0xee2	; 0xee2 <toupper>
 190:	8a 33       	cpi	r24, 0x3A	; 58
 192:	91 05       	cpc	r25, r1
 194:	14 f0       	brlt	.+4      	; 0x19a <ParseValue+0xb6>
 196:	87 53       	subi	r24, 0x37	; 55
 198:	02 c0       	rjmp	.+4      	; 0x19e <ParseValue+0xba>
 19a:	81 2f       	mov	r24, r17
 19c:	80 53       	subi	r24, 0x30	; 48
 19e:	80 0f       	add	r24, r16
 1a0:	80 93 41 05 	sts	0x0541, r24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <ParseValue+0xc6>

    return true;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
    }
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <ParseNBytes>:
// Outputs:     TRUE  if value parsed correctly
//              FALSE if out or range or other error
//
static bool ParseNBytes(void) {

    if( !ParseValue() ) {
 1b4:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 1b8:	88 23       	and	r24, r24
 1ba:	69 f4       	brne	.+26     	; 0x1d6 <ParseNBytes+0x22>
        PrintString("Unrecognized nBytes (");
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintString(Token);
 1c4:	80 91 45 05 	lds	r24, 0x0545
 1c8:	90 91 46 05 	lds	r25, 0x0546
 1cc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintString("), must 2 hex chars.\r\n");
 1d0:	86 e1       	ldi	r24, 0x16	; 22
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	1c c0       	rjmp	.+56     	; 0x20e <ParseNBytes+0x5a>
        PrintString("Type '?' for help\r\n");
        PrintCRLF();
        return(false);
        }

    if( Value > MAX_RWBYTES ) {
 1d6:	80 91 41 05 	lds	r24, 0x0541
 1da:	81 3f       	cpi	r24, 0xF1	; 241
 1dc:	a0 f0       	brcs	.+40     	; 0x206 <ParseNBytes+0x52>
        PrintString("nBytes too big (");
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintString(Token);
 1e6:	80 91 45 05 	lds	r24, 0x0545
 1ea:	90 91 46 05 	lds	r25, 0x0546
 1ee:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintString("), must <= ");
 1f2:	82 e5       	ldi	r24, 0x52	; 82
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintH(MAX_RWBYTES);
 1fa:	80 ef       	ldi	r24, 0xF0	; 240
 1fc:	0e 94 46 06 	call	0xc8c	; 0xc8c <PrintH>
        PrintString(".\r\n");
 200:	8e e5       	ldi	r24, 0x5E	; 94
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	04 c0       	rjmp	.+8      	; 0x20e <ParseNBytes+0x5a>
        PrintString("Type '?' for help\r\n");
        PrintCRLF();
        return(false);
        }

    if( Value == 0 ) {
 206:	88 23       	and	r24, r24
 208:	61 f4       	brne	.+24     	; 0x222 <ParseNBytes+0x6e>
        PrintString("nBytes cannot be zero! Causes hang!\r\n");
 20a:	82 e6       	ldi	r24, 0x62	; 98
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintString("Type '?' for help\r\n");
 212:	8d e2       	ldi	r24, 0x2D	; 45
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintCRLF();
 21a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	08 95       	ret
        return(false);
        }

    nBytes = Value;
 222:	80 93 43 05 	sts	0x0543, r24
 226:	81 e0       	ldi	r24, 0x01	; 1
    return(true);
    }
 228:	08 95       	ret

0000022a <PrintResults>:
//
// Inputs:      TRUE if should also dump buffer (from READ or DUMP cmd)
//
// Outputs:     None. Prints status
//
static void PrintResults(bool PrintBuffer) {
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	18 2f       	mov	r17, r24
    Status = I2CStatus();
 234:	0e 94 d6 04 	call	0x9ac	; 0x9ac <I2CStatus>
 238:	80 93 42 05 	sts	0x0542, r24

    if( Status <= I2C_LAST_ERROR ) PrintString(StatusText[Status-I2C_COMPLETE]);
 23c:	87 30       	cpi	r24, 0x07	; 7
 23e:	48 f4       	brcc	.+18     	; 0x252 <PrintResults+0x28>
 240:	e8 2f       	mov	r30, r24
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e0 54       	subi	r30, 0x40	; 64
 24a:	fb 4f       	sbci	r31, 0xFB	; 251
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	02 c0       	rjmp	.+4      	; 0x256 <PrintResults+0x2c>
    else                           PrintString("????");
 252:	88 e8       	ldi	r24, 0x88	; 136
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
    PrintString(" (");
 25a:	8d e8       	ldi	r24, 0x8D	; 141
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>

    PrintH(Status);
 262:	80 91 42 05 	lds	r24, 0x0542
 266:	0e 94 46 06 	call	0xc8c	; 0xc8c <PrintH>
    PrintString(")\r\n");
 26a:	80 e9       	ldi	r24, 0x90	; 144
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>

    if( PrintBuffer && Status == I2C_COMPLETE ) {
 272:	11 23       	and	r17, r17
 274:	81 f1       	breq	.+96     	; 0x2d6 <PrintResults+0xac>
 276:	80 91 42 05 	lds	r24, 0x0542
 27a:	88 23       	and	r24, r24
 27c:	61 f5       	brne	.+88     	; 0x2d6 <PrintResults+0xac>
        PrintString("Data:\r\n");
 27e:	84 e9       	ldi	r24, 0x94	; 148
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
 286:	08 e4       	ldi	r16, 0x48	; 72
 288:	15 e0       	ldi	r17, 0x05	; 5
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	d0 e0       	ldi	r29, 0x00	; 0
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <PrintResults+0x9c>
        for( int i=0; i<nBytes; i++ ) {
            PrintString("  0x");
 290:	8c e9       	ldi	r24, 0x9C	; 156
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintH(i);
 298:	8c 2f       	mov	r24, r28
 29a:	0e 94 46 06 	call	0xc8c	; 0xc8c <PrintH>
            PrintString(": 0x");
 29e:	81 ea       	ldi	r24, 0xA1	; 161
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintH(Buffer[i]);
 2a6:	f8 01       	movw	r30, r16
 2a8:	80 81       	ld	r24, Z
 2aa:	0e 94 46 06 	call	0xc8c	; 0xc8c <PrintH>
            PrintString("  0b");
 2ae:	86 ea       	ldi	r24, 0xA6	; 166
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintB(Buffer[i]);
 2b6:	f8 01       	movw	r30, r16
 2b8:	81 91       	ld	r24, Z+
 2ba:	8f 01       	movw	r16, r30
 2bc:	0e 94 29 06 	call	0xc52	; 0xc52 <PrintB>
            PrintCRLF();
 2c0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
    PrintH(Status);
    PrintString(")\r\n");

    if( PrintBuffer && Status == I2C_COMPLETE ) {
        PrintString("Data:\r\n");
        for( int i=0; i<nBytes; i++ ) {
 2c4:	21 96       	adiw	r28, 0x01	; 1
 2c6:	80 91 43 05 	lds	r24, 0x0543
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	c8 17       	cp	r28, r24
 2ce:	d9 07       	cpc	r29, r25
 2d0:	fc f2       	brlt	.-66     	; 0x290 <PrintResults+0x66>
            PrintH(Buffer[i]);
            PrintString("  0b");
            PrintB(Buffer[i]);
            PrintCRLF();
            }
        PrintCRLF();
 2d2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
        }
    }
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <SerialCommand>:
//
// Inputs:      Command line typed by user
//
// Outputs:     None.
//
void SerialCommand(char *Line) {
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
    char    *Command;

    ParseInit(Line);
 2e4:	0e 94 ca 05 	call	0xb94	; 0xb94 <ParseInit>
    Command = ParseToken();
 2e8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <ParseToken>
 2ec:	ec 01       	movw	r28, r24

    //
    // R - Read bytes from slave
    //
    if( StrEQ(Command,"R") ) {
 2ee:	6b ea       	ldi	r22, 0xAB	; 171
 2f0:	71 e0       	ldi	r23, 0x01	; 1
 2f2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 2f6:	88 23       	and	r24, r24
 2f8:	19 f1       	breq	.+70     	; 0x340 <SerialCommand+0x60>
        if( !ParseValue() ) {
 2fa:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 2fe:	88 23       	and	r24, r24
 300:	09 f4       	brne	.+2      	; 0x304 <SerialCommand+0x24>
 302:	0f c1       	rjmp	.+542    	; 0x522 <SerialCommand+0x242>
            PrintString("), must 2 hex chars.\r\n");
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }
        SlaveAddr = Value;
 304:	80 91 41 05 	lds	r24, 0x0541
 308:	80 93 38 06 	sts	0x0638, r24

        if( !ParseNBytes() )
 30c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ParseNBytes>
 310:	88 23       	and	r24, r24
 312:	09 f4       	brne	.+2      	; 0x316 <SerialCommand+0x36>
 314:	80 c1       	rjmp	.+768    	; 0x616 <SerialCommand+0x336>
            return;

        memset(Buffer,0xFF,sizeof(Buffer));
 316:	88 e4       	ldi	r24, 0x48	; 72
 318:	95 e0       	ldi	r25, 0x05	; 5
 31a:	6f ef       	ldi	r22, 0xFF	; 255
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	40 ef       	ldi	r20, 0xF0	; 240
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	0e 94 1a 07 	call	0xe34	; 0xe34 <memset>
        GetI2CW(SlaveAddr,nBytes,Buffer);
 326:	80 91 38 06 	lds	r24, 0x0638
 32a:	60 91 43 05 	lds	r22, 0x0543
 32e:	48 e4       	ldi	r20, 0x48	; 72
 330:	55 e0       	ldi	r21, 0x05	; 5
 332:	0e 94 bb 04 	call	0x976	; 0x976 <GetI2C>
 336:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 33a:	88 23       	and	r24, r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <SerialCommand+0x56>
 33e:	3f c1       	rjmp	.+638    	; 0x5be <SerialCommand+0x2de>


    //
    // W - Write bytes to slave
    //
    if( StrEQ(Command,"W") ) {
 340:	ce 01       	movw	r24, r28
 342:	67 ec       	ldi	r22, 0xC7	; 199
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 34a:	88 23       	and	r24, r24
 34c:	09 f4       	brne	.+2      	; 0x350 <SerialCommand+0x70>
 34e:	46 c0       	rjmp	.+140    	; 0x3dc <SerialCommand+0xfc>
        if( !ParseValue() ) {
 350:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 354:	88 23       	and	r24, r24
 356:	09 f4       	brne	.+2      	; 0x35a <SerialCommand+0x7a>
 358:	e4 c0       	rjmp	.+456    	; 0x522 <SerialCommand+0x242>
            PrintString("), must 2 hex chars.\r\n");
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }
        SlaveAddr = Value;
 35a:	80 91 41 05 	lds	r24, 0x0541
 35e:	80 93 38 06 	sts	0x0638, r24

        for( nBytes = 0; nBytes < MAX_RWBYTES; nBytes++ ) {
 362:	10 92 43 05 	sts	0x0543, r1
 366:	10 c0       	rjmp	.+32     	; 0x388 <SerialCommand+0xa8>
            if( !ParseValue() )
 368:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 36c:	88 23       	and	r24, r24
 36e:	81 f0       	breq	.+32     	; 0x390 <SerialCommand+0xb0>
                break;
            Buffer[nBytes] = Value;
 370:	80 91 43 05 	lds	r24, 0x0543
 374:	e8 2f       	mov	r30, r24
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	e8 5b       	subi	r30, 0xB8	; 184
 37a:	fa 4f       	sbci	r31, 0xFA	; 250
 37c:	90 91 41 05 	lds	r25, 0x0541
 380:	90 83       	st	Z, r25
            PrintCRLF();
            return;
            }
        SlaveAddr = Value;

        for( nBytes = 0; nBytes < MAX_RWBYTES; nBytes++ ) {
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 43 05 	sts	0x0543, r24
 388:	80 91 43 05 	lds	r24, 0x0543
 38c:	80 3f       	cpi	r24, 0xF0	; 240
 38e:	60 f3       	brcs	.-40     	; 0x368 <SerialCommand+0x88>
            if( !ParseValue() )
                break;
            Buffer[nBytes] = Value;
            }

        if( ParseValue() ) {
 390:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 394:	88 23       	and	r24, r24
 396:	a1 f0       	breq	.+40     	; 0x3c0 <SerialCommand+0xe0>
            PrintString("Too much data (");
 398:	89 ec       	ldi	r24, 0xC9	; 201
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintString(Token);
 3a0:	80 91 45 05 	lds	r24, 0x0545
 3a4:	90 91 46 05 	lds	r25, 0x0546
 3a8:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintString("), must <= ");
 3ac:	82 e5       	ldi	r24, 0x52	; 82
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintH(MAX_RWBYTES);
 3b4:	80 ef       	ldi	r24, 0xF0	; 240
 3b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <PrintH>
            PrintString(".\r\n");
 3ba:	8e e5       	ldi	r24, 0x5E	; 94
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	c8 c0       	rjmp	.+400    	; 0x550 <SerialCommand+0x270>
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }

        PutI2CW(SlaveAddr,nBytes,Buffer,false);
 3c0:	80 91 38 06 	lds	r24, 0x0638
 3c4:	60 91 43 05 	lds	r22, 0x0543
 3c8:	48 e4       	ldi	r20, 0x48	; 72
 3ca:	55 e0       	ldi	r21, 0x05	; 5
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	0e 94 a7 04 	call	0x94e	; 0x94e <PutI2C>
 3d2:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 3d6:	88 23       	and	r24, r24
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <SerialCommand+0xf2>
 3da:	f2 c0       	rjmp	.+484    	; 0x5c0 <SerialCommand+0x2e0>


    //
    // S - Scan for slaves by reading register (default: Reg 0)
    //
    if( StrEQ(Command,"S") ) {
 3dc:	ce 01       	movw	r24, r28
 3de:	69 ed       	ldi	r22, 0xD9	; 217
 3e0:	71 e0       	ldi	r23, 0x01	; 1
 3e2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 3e6:	88 23       	and	r24, r24
 3e8:	09 f4       	brne	.+2      	; 0x3ec <SerialCommand+0x10c>
 3ea:	48 c0       	rjmp	.+144    	; 0x47c <SerialCommand+0x19c>
        nSlaves = 0;
 3ec:	10 92 47 05 	sts	0x0547, r1
        PrintString("Addr: Result\r\n");
 3f0:	8b ed       	ldi	r24, 0xDB	; 219
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        for( SlaveAddr = 0; SlaveAddr <= 127; SlaveAddr++ ) {
 3f8:	10 92 38 06 	sts	0x0638, r1
 3fc:	32 c0       	rjmp	.+100    	; 0x462 <SerialCommand+0x182>
            GetI2CW(SlaveAddr,1,Buffer);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	48 e4       	ldi	r20, 0x48	; 72
 402:	55 e0       	ldi	r21, 0x05	; 5
 404:	0e 94 bb 04 	call	0x976	; 0x976 <GetI2C>
 408:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 40c:	88 23       	and	r24, r24
 40e:	e1 f7       	brne	.-8      	; 0x408 <SerialCommand+0x128>
            Status = I2CStatus();
 410:	0e 94 d6 04 	call	0x9ac	; 0x9ac <I2CStatus>
 414:	80 93 42 05 	sts	0x0542, r24
            if( Status == I2C_NO_SLAVE_ACK )
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	f1 f0       	breq	.+60     	; 0x458 <SerialCommand+0x178>
                continue;
            PrintH(SlaveAddr);
 41c:	80 91 38 06 	lds	r24, 0x0638
 420:	0e 94 46 06 	call	0xc8c	; 0xc8c <PrintH>
            PrintString("  : ");
 424:	8a ee       	ldi	r24, 0xEA	; 234
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintString(StatusText[Status-I2C_COMPLETE]);
 42c:	e0 91 42 05 	lds	r30, 0x0542
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	ee 0f       	add	r30, r30
 434:	ff 1f       	adc	r31, r31
 436:	e0 54       	subi	r30, 0x40	; 64
 438:	fb 4f       	sbci	r31, 0xFB	; 251
 43a:	80 81       	ld	r24, Z
 43c:	91 81       	ldd	r25, Z+1	; 0x01
 43e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintCRLF();
 442:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
            if( Status != I2C_NO_SLAVE_ACK )
 446:	80 91 42 05 	lds	r24, 0x0542
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	29 f0       	breq	.+10     	; 0x458 <SerialCommand+0x178>
                nSlaves++;
 44e:	80 91 47 05 	lds	r24, 0x0547
 452:	8f 5f       	subi	r24, 0xFF	; 255
 454:	80 93 47 05 	sts	0x0547, r24
    // S - Scan for slaves by reading register (default: Reg 0)
    //
    if( StrEQ(Command,"S") ) {
        nSlaves = 0;
        PrintString("Addr: Result\r\n");
        for( SlaveAddr = 0; SlaveAddr <= 127; SlaveAddr++ ) {
 458:	80 91 38 06 	lds	r24, 0x0638
 45c:	8f 5f       	subi	r24, 0xFF	; 255
 45e:	80 93 38 06 	sts	0x0638, r24
 462:	80 91 38 06 	lds	r24, 0x0638
 466:	87 ff       	sbrs	r24, 7
 468:	ca cf       	rjmp	.-108    	; 0x3fe <SerialCommand+0x11e>
            PrintString(StatusText[Status-I2C_COMPLETE]);
            PrintCRLF();
            if( Status != I2C_NO_SLAVE_ACK )
                nSlaves++;
            }
        PrintD(nSlaves,0);
 46a:	80 91 47 05 	lds	r24, 0x0547
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	0e 94 60 06 	call	0xcc0	; 0xcc0 <PrintD>
        PrintString(" responses\r\n");
 476:	8f ee       	ldi	r24, 0xEF	; 239
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	c9 c0       	rjmp	.+402    	; 0x60e <SerialCommand+0x32e>


    //
    // D - Dump specified registers from device
    //
    if( StrEQ(Command,"D") ) {
 47c:	ce 01       	movw	r24, r28
 47e:	6c ef       	ldi	r22, 0xFC	; 252
 480:	71 e0       	ldi	r23, 0x01	; 1
 482:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 486:	88 23       	and	r24, r24
 488:	09 f4       	brne	.+2      	; 0x48c <SerialCommand+0x1ac>
 48a:	3f c0       	rjmp	.+126    	; 0x50a <SerialCommand+0x22a>
        if( !ParseValue() ) {
 48c:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 490:	88 23       	and	r24, r24
 492:	09 f4       	brne	.+2      	; 0x496 <SerialCommand+0x1b6>
 494:	46 c0       	rjmp	.+140    	; 0x522 <SerialCommand+0x242>
            PrintString("), must 2 hex chars.\r\n");
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }
        SlaveAddr = Value;
 496:	80 91 41 05 	lds	r24, 0x0541
 49a:	80 93 38 06 	sts	0x0638, r24

        if( !ParseValue() ) {
 49e:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 4a2:	88 23       	and	r24, r24
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <SerialCommand+0x1c8>
 4a6:	48 c0       	rjmp	.+144    	; 0x538 <SerialCommand+0x258>
            PrintString("), must 2 hex chars.\r\n");
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }
        Reg = Value;
 4a8:	80 91 41 05 	lds	r24, 0x0541
 4ac:	80 93 44 05 	sts	0x0544, r24

        if( !ParseNBytes() )
 4b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ParseNBytes>
 4b4:	88 23       	and	r24, r24
 4b6:	09 f4       	brne	.+2      	; 0x4ba <SerialCommand+0x1da>
 4b8:	ae c0       	rjmp	.+348    	; 0x616 <SerialCommand+0x336>
            return;

        memset(Buffer,0xFF,sizeof(Buffer));
 4ba:	88 e4       	ldi	r24, 0x48	; 72
 4bc:	95 e0       	ldi	r25, 0x05	; 5
 4be:	6f ef       	ldi	r22, 0xFF	; 255
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	40 ef       	ldi	r20, 0xF0	; 240
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	0e 94 1a 07 	call	0xe34	; 0xe34 <memset>
        PutI2CW(SlaveAddr,1,&Reg,false);
 4ca:	80 91 38 06 	lds	r24, 0x0638
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	44 e4       	ldi	r20, 0x44	; 68
 4d2:	55 e0       	ldi	r21, 0x05	; 5
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	0e 94 a7 04 	call	0x94e	; 0x94e <PutI2C>
 4da:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 4de:	88 23       	and	r24, r24
 4e0:	e1 f7       	brne	.-8      	; 0x4da <SerialCommand+0x1fa>
        PrintString("Write: ");
 4e2:	81 e1       	ldi	r24, 0x11	; 17
 4e4:	92 e0       	ldi	r25, 0x02	; 2
 4e6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintResults(false);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 15 01 	call	0x22a	; 0x22a <PrintResults>
        GetI2CW(SlaveAddr,nBytes,Buffer);
 4f0:	80 91 38 06 	lds	r24, 0x0638
 4f4:	60 91 43 05 	lds	r22, 0x0543
 4f8:	48 e4       	ldi	r20, 0x48	; 72
 4fa:	55 e0       	ldi	r21, 0x05	; 5
 4fc:	0e 94 bb 04 	call	0x976	; 0x976 <GetI2C>
 500:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 504:	88 23       	and	r24, r24
 506:	e1 f7       	brne	.-8      	; 0x500 <SerialCommand+0x220>
 508:	56 c0       	rjmp	.+172    	; 0x5b6 <SerialCommand+0x2d6>


    //
    // G - Get all registers using repeated start
    //
    if( StrEQ(Command,"D") ) {
 50a:	ce 01       	movw	r24, r28
 50c:	6c ef       	ldi	r22, 0xFC	; 252
 50e:	71 e0       	ldi	r23, 0x01	; 1
 510:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 514:	88 23       	and	r24, r24
 516:	09 f4       	brne	.+2      	; 0x51a <SerialCommand+0x23a>
 518:	56 c0       	rjmp	.+172    	; 0x5c6 <SerialCommand+0x2e6>
        if( !ParseValue() ) {
 51a:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 51e:	88 23       	and	r24, r24
 520:	19 f4       	brne	.+6      	; 0x528 <SerialCommand+0x248>
            PrintString("Unrecognized slave addr (");
 522:	8d ea       	ldi	r24, 0xAD	; 173
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0a c0       	rjmp	.+20     	; 0x53c <SerialCommand+0x25c>
            PrintString("), must 2 hex chars.\r\n");
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }
        SlaveAddr = Value;
 528:	80 91 41 05 	lds	r24, 0x0541
 52c:	80 93 38 06 	sts	0x0638, r24

        if( !ParseValue() ) {
 530:	0e 94 72 00 	call	0xe4	; 0xe4 <ParseValue>
 534:	88 23       	and	r24, r24
 536:	79 f4       	brne	.+30     	; 0x556 <SerialCommand+0x276>
            PrintString("Unrecognized reg (");
 538:	8e ef       	ldi	r24, 0xFE	; 254
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintString(Token);
 540:	80 91 45 05 	lds	r24, 0x0545
 544:	90 91 46 05 	lds	r25, 0x0546
 548:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
            PrintString("), must 2 hex chars.\r\n");
 54c:	86 e1       	ldi	r24, 0x16	; 22
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
 554:	5a c0       	rjmp	.+180    	; 0x60a <SerialCommand+0x32a>
            PrintString("Type '?' for help\r\n");
            PrintCRLF();
            return;
            }
        Reg = Value;
 556:	80 91 41 05 	lds	r24, 0x0541
 55a:	80 93 44 05 	sts	0x0544, r24

        if( !ParseNBytes() )
 55e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <ParseNBytes>
 562:	88 23       	and	r24, r24
 564:	09 f4       	brne	.+2      	; 0x568 <SerialCommand+0x288>
 566:	57 c0       	rjmp	.+174    	; 0x616 <SerialCommand+0x336>
            return;

        memset(Buffer,0xFF,sizeof(Buffer));
 568:	88 e4       	ldi	r24, 0x48	; 72
 56a:	95 e0       	ldi	r25, 0x05	; 5
 56c:	6f ef       	ldi	r22, 0xFF	; 255
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	40 ef       	ldi	r20, 0xF0	; 240
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	0e 94 1a 07 	call	0xe34	; 0xe34 <memset>
        PutI2CW(SlaveAddr,1,&Reg,true);
 578:	80 91 38 06 	lds	r24, 0x0638
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	44 e4       	ldi	r20, 0x44	; 68
 580:	55 e0       	ldi	r21, 0x05	; 5
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	0e 94 a7 04 	call	0x94e	; 0x94e <PutI2C>
 588:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 58c:	88 23       	and	r24, r24
 58e:	e1 f7       	brne	.-8      	; 0x588 <SerialCommand+0x2a8>
        PrintString("Write: ");
 590:	81 e1       	ldi	r24, 0x11	; 17
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintResults(false);
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	0e 94 15 01 	call	0x22a	; 0x22a <PrintResults>
        GetI2CW(SlaveAddr,nBytes,Buffer);
 59e:	80 91 38 06 	lds	r24, 0x0638
 5a2:	60 91 43 05 	lds	r22, 0x0543
 5a6:	48 e4       	ldi	r20, 0x48	; 72
 5a8:	55 e0       	ldi	r21, 0x05	; 5
 5aa:	0e 94 bb 04 	call	0x976	; 0x976 <GetI2C>
 5ae:	0e 94 ce 04 	call	0x99c	; 0x99c <I2CBusy>
 5b2:	88 23       	and	r24, r24
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <SerialCommand+0x2ce>
        PrintString("Read:  ");
 5b6:	89 e1       	ldi	r24, 0x19	; 25
 5b8:	92 e0       	ldi	r25, 0x02	; 2
 5ba:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
        PrintResults(true);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	0e 94 15 01 	call	0x22a	; 0x22a <PrintResults>
 5c4:	28 c0       	rjmp	.+80     	; 0x616 <SerialCommand+0x336>
    //

    //
    // HE - Help screen
    //
    if( StrEQ(Command,"H") ||
 5c6:	ce 01       	movw	r24, r28
 5c8:	61 e2       	ldi	r22, 0x21	; 33
 5ca:	72 e0       	ldi	r23, 0x02	; 2
 5cc:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 5d0:	88 23       	and	r24, r24
 5d2:	39 f4       	brne	.+14     	; 0x5e2 <SerialCommand+0x302>
 5d4:	ce 01       	movw	r24, r28
 5d6:	63 e2       	ldi	r22, 0x23	; 35
 5d8:	72 e0       	ldi	r23, 0x02	; 2
 5da:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <StrEQ>
 5de:	88 23       	and	r24, r24
 5e0:	29 f0       	breq	.+10     	; 0x5ec <SerialCommand+0x30c>
        StrEQ(Command,"?" ) ) {
        PrintCRLF();
 5e2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
        PrintString(HELP_SCREEN);
 5e6:	85 e2       	ldi	r24, 0x25	; 37
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <SerialCommand+0x32e>


    //
    // Not a recognized command. Let the user know he goofed.
    //
    PrintStringP(PSTR(BEEP));
 5ec:	83 e8       	ldi	r24, 0x83	; 131
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <PrintStringP>
    PrintStringP(PSTR("Unrecognized Command \""));
 5f4:	8c e6       	ldi	r24, 0x6C	; 108
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <PrintStringP>
    PrintString (Command);
 5fc:	ce 01       	movw	r24, r28
 5fe:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
    PrintStringP(PSTR("\"\r\n"));
 602:	88 e6       	ldi	r24, 0x68	; 104
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 ff 06 	call	0xdfe	; 0xdfe <PrintStringP>
    PrintString("Type '?' for help\r\n");
 60a:	8d e2       	ldi	r24, 0x2D	; 45
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
    PrintCRLF();
 612:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
    }
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <main>:

    //////////////////////////////////////////////////////////////////////////////////////
    //
    // Initialize the UART
    //
    UARTInit();
 61c:	0e 94 c3 03 	call	0x786	; 0x786 <UARTInit>
    I2CInit(100,OurAddr,true);
 620:	84 e6       	ldi	r24, 0x64	; 100
 622:	60 91 55 04 	lds	r22, 0x0455
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	0e 94 73 05 	call	0xae6	; 0xae6 <I2CInit>

    sei();                              // Enable interrupts
 62c:	78 94       	sei

    ClearScreen;
 62e:	85 e8       	ldi	r24, 0x85	; 133
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 ff 06 	call	0xdfe	; 0xdfe <PrintStringP>
    //
    // End of init
    //
    //////////////////////////////////////////////////////////////////////////////////////

    PrintString("I2C CMD\r\n");
 636:	89 e3       	ldi	r24, 0x39	; 57
 638:	94 e0       	ldi	r25, 0x04	; 4
 63a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
    PrintString("Type '?' for help");
 63e:	83 e4       	ldi	r24, 0x43	; 67
 640:	94 e0       	ldi	r25, 0x04	; 4
 642:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
    PrintCRLF();
 646:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>
    PrintCRLF();
 64a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PrintCRLF>

    GetLineInit();
 64e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <GetLineInit>
    // 
    while(1) {
        //
        // Process user commands
        //
        ProcessSerialInput(GetUARTByte());
 652:	0e 94 4e 03 	call	0x69c	; 0x69c <GetUARTByte>
 656:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <ProcessSerialInput>
 65a:	fb cf       	rjmp	.-10     	; 0x652 <main+0x36>

0000065c <PutUARTByte>:
// Inputs:      Byte to send
//
// Outputs:     TRUE  if char was sent OK,
//              FALSE if buffer full
//
bool PutUARTByte(char OutChar) {
 65c:	28 2f       	mov	r18, r24
    uint8_t NewIn;
    bool    Success = false;

    _CLR_BIT(UCSR0B,UDRIE0);                    // Disable UART interrupts
 65e:	80 91 c1 00 	lds	r24, 0x00C1
 662:	8f 7d       	andi	r24, 0xDF	; 223
 664:	80 93 c1 00 	sts	0x00C1, r24

    //
    // If there's room in the buffer, add the new char
    //
    NewIn = (UART.Tx_FIFO_In+1) & OFIFO_WRAP;
 668:	e0 91 81 06 	lds	r30, 0x0681
 66c:	ef 5f       	subi	r30, 0xFF	; 255
 66e:	9e 2f       	mov	r25, r30
 670:	9f 73       	andi	r25, 0x3F	; 63
 672:	e1 50       	subi	r30, 0x01	; 1

    if( NewIn != UART.Tx_FIFO_Out ) {
 674:	80 91 82 06 	lds	r24, 0x0682
 678:	98 17       	cp	r25, r24
 67a:	11 f4       	brne	.+4      	; 0x680 <PutUARTByte+0x24>
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	07 c0       	rjmp	.+14     	; 0x68e <PutUARTByte+0x32>
        UART.Tx_FIFO[UART.Tx_FIFO_In] = OutChar;
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	e7 5c       	subi	r30, 0xC7	; 199
 684:	f9 4f       	sbci	r31, 0xF9	; 249
 686:	20 87       	std	Z+8, r18	; 0x08
        UART.Tx_FIFO_In               = NewIn;
 688:	90 93 81 06 	sts	0x0681, r25
 68c:	91 e0       	ldi	r25, 0x01	; 1
        Success = true;
        }

    _SET_BIT(UCSR0B,UDRIE0);                    // Enable UART interrupts
 68e:	80 91 c1 00 	lds	r24, 0x00C1
 692:	80 62       	ori	r24, 0x20	; 32
 694:	80 93 c1 00 	sts	0x00C1, r24

    return(Success);
    }
 698:	89 2f       	mov	r24, r25
 69a:	08 95       	ret

0000069c <GetUARTByte>:
//              NUL   (binary value = 0) if no chars available
//
char GetUARTByte(void) {
    char    OutChar = 0;

    _CLR_BIT(UCSR0B,RXCIE0);                     // Disable UART interrupts
 69c:	80 91 c1 00 	lds	r24, 0x00C1
 6a0:	8f 77       	andi	r24, 0x7F	; 127
 6a2:	80 93 c1 00 	sts	0x00C1, r24

    if( UART.Rx_FIFO_In != UART.Rx_FIFO_Out ) {
 6a6:	90 91 84 06 	lds	r25, 0x0684
 6aa:	80 91 83 06 	lds	r24, 0x0683
 6ae:	89 17       	cp	r24, r25
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <GetUARTByte+0x1a>
 6b2:	e0 e0       	ldi	r30, 0x00	; 0
 6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <GetUARTByte+0x2c>
        OutChar = UART.Rx_FIFO[UART.Rx_FIFO_Out];
 6b6:	e9 2f       	mov	r30, r25
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	e7 5c       	subi	r30, 0xC7	; 199
 6bc:	f9 4f       	sbci	r31, 0xF9	; 249
 6be:	e0 81       	ld	r30, Z
        UART.Rx_FIFO_Out = (UART.Rx_FIFO_Out+1) & IFIFO_WRAP;
 6c0:	9f 5f       	subi	r25, 0xFF	; 255
 6c2:	97 70       	andi	r25, 0x07	; 7
 6c4:	90 93 84 06 	sts	0x0684, r25
        }

    _SET_BIT(UCSR0B,RXCIE0);                    // Enable UART interrupts
 6c8:	80 91 c1 00 	lds	r24, 0x00C1
 6cc:	80 68       	ori	r24, 0x80	; 128
 6ce:	80 93 c1 00 	sts	0x00C1, r24

    return(OutChar);
    }
 6d2:	8e 2f       	mov	r24, r30
 6d4:	08 95       	ret

000006d6 <UARTBusy>:
// Inputs:      None
//
// Outputs:     TRUE  if UART is busy sending output
//              FALSE if UART is idle
//
bool UARTBusy(void) { return( UART.Tx_FIFO_In != UART.Tx_FIFO_Out ); }
 6d6:	20 e0       	ldi	r18, 0x00	; 0
 6d8:	90 91 81 06 	lds	r25, 0x0681
 6dc:	80 91 82 06 	lds	r24, 0x0682
 6e0:	98 13       	cpse	r25, r24
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	82 2f       	mov	r24, r18
 6e6:	08 95       	ret

000006e8 <__vector_18>:
//
// Inputs:      None. (ISR)
//
// Outputs:     None.
//
ISR(USART_RX_vect) {
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	11 24       	eor	r1, r1
 6f2:	2f 93       	push	r18
 6f4:	8f 93       	push	r24
 6f6:	9f 93       	push	r25
 6f8:	ef 93       	push	r30
 6fa:	ff 93       	push	r31
    uint8_t NewIn;
    char    NewChar;

    NewChar = UDR0;                         // Get data, clear errors
 6fc:	20 91 c6 00 	lds	r18, 0x00C6

    //
    // If there's room in the buffer, add the new char
    //
    NewIn = (UART.Rx_FIFO_In+1) & IFIFO_WRAP;
 700:	e0 91 83 06 	lds	r30, 0x0683
 704:	ef 5f       	subi	r30, 0xFF	; 255
 706:	9e 2f       	mov	r25, r30
 708:	97 70       	andi	r25, 0x07	; 7
 70a:	e1 50       	subi	r30, 0x01	; 1

    if( NewIn != UART.Rx_FIFO_Out ) {
 70c:	80 91 84 06 	lds	r24, 0x0684
 710:	98 17       	cp	r25, r24
 712:	31 f0       	breq	.+12     	; 0x720 <__vector_18+0x38>
        UART.Rx_FIFO[UART.Rx_FIFO_In] = NewChar;
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	e7 5c       	subi	r30, 0xC7	; 199
 718:	f9 4f       	sbci	r31, 0xF9	; 249
 71a:	20 83       	st	Z, r18
        UART.Rx_FIFO_In               = NewIn;
 71c:	90 93 83 06 	sts	0x0683, r25
        }

    //
    // No room - Drop the character
    //
    }
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_19>:
//
// Inputs:      None. (ISR)
//
// Outputs:     None.
//
ISR(USART_UDRE_vect) {
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	ef 93       	push	r30
 744:	ff 93       	push	r31

    //
    // If more chars are available, queue one up.
    //
    if( UART.Tx_FIFO_In != UART.Tx_FIFO_Out ) {
 746:	90 91 82 06 	lds	r25, 0x0682
 74a:	80 91 81 06 	lds	r24, 0x0681
 74e:	89 17       	cp	r24, r25
 750:	61 f0       	breq	.+24     	; 0x76a <__vector_19+0x36>
        UDR0             = UART.Tx_FIFO[UART.Tx_FIFO_Out];
 752:	e9 2f       	mov	r30, r25
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	e7 5c       	subi	r30, 0xC7	; 199
 758:	f9 4f       	sbci	r31, 0xF9	; 249
 75a:	80 85       	ldd	r24, Z+8	; 0x08
 75c:	80 93 c6 00 	sts	0x00C6, r24
        UART.Tx_FIFO_Out = (UART.Tx_FIFO_Out+1) & OFIFO_WRAP;
 760:	9f 5f       	subi	r25, 0xFF	; 255
 762:	9f 73       	andi	r25, 0x3F	; 63
 764:	90 93 82 06 	sts	0x0682, r25
 768:	05 c0       	rjmp	.+10     	; 0x774 <__vector_19+0x40>
        }

    //
    // Else turn off interrupts, for now.
    //
    else _CLR_BIT(UCSR0B,UDRIE0);       // Disable buffer empty interrupt
 76a:	80 91 c1 00 	lds	r24, 0x00C1
 76e:	8f 7d       	andi	r24, 0xDF	; 223
 770:	80 93 c1 00 	sts	0x00C1, r24
    }
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <UARTInit>:
//
// Outputs:     None.
//
void UARTInit(void) {

    memset(&UART,0,sizeof(UART));
 786:	8c e4       	ldi	r24, 0x4C	; 76
 788:	e9 e3       	ldi	r30, 0x39	; 57
 78a:	f6 e0       	ldi	r31, 0x06	; 6
 78c:	df 01       	movw	r26, r30
 78e:	1d 92       	st	X+, r1
 790:	8a 95       	dec	r24
 792:	e9 f7       	brne	.-6      	; 0x78e <UARTInit+0x8>

    _CLR_BIT(PRR,PRUSART0);             // Power up the UART
 794:	e4 e6       	ldi	r30, 0x64	; 100
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	8d 7f       	andi	r24, 0xFD	; 253
 79c:	80 83       	st	Z, r24
    //
    // Set the baud rate
    //
#include <util/setbaud.h>

    UBRR0H = UBRRH_VALUE;
 79e:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
 7a2:	83 e3       	ldi	r24, 0x33	; 51
 7a4:	80 93 c4 00 	sts	0x00C4, r24
#if USE_2X
    _SET_BIT(UCSR0A,U2X0);
#else
    _CLR_BIT(UCSR0A,U2X0);
 7a8:	e0 ec       	ldi	r30, 0xC0	; 192
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	8d 7f       	andi	r24, 0xFD	; 253
 7b0:	80 83       	st	Z, r24
#endif

    //
    // Enable port I/O and Rx interrupt
    //
    UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);    // 8,n,1
 7b2:	86 e0       	ldi	r24, 0x06	; 6
 7b4:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = (1<< RXEN0) | (1<< TXEN0) | (1<<RXCIE0);
 7b8:	88 e9       	ldi	r24, 0x98	; 152
 7ba:	80 93 c1 00 	sts	0x00C1, r24

    //
    // Enable internal pull-up resistor on pin D0 (RX), to supress line noise
    //
    _CLR_BIT( DDRD,PIND0);
 7be:	50 98       	cbi	0x0a, 0	; 10
    _SET_BIT(PORTD,PIND0);
 7c0:	58 9a       	sbi	0x0b, 0	; 11
    }
 7c2:	08 95       	ret

000007c4 <PlotCursor>:
    PrintD(INPUT_ROW,0);
    PrintStringP(PSTR(";"));
    PrintD(INPUT_COL+strlen(LineBuffer)+strlen(PROMPT),0);
    PrintStringP(PSTR("H"));
#endif
    }
 7c4:	08 95       	ret

000007c6 <Prompt>:
void Prompt(void) {

#ifndef LINE_BASED
    CursorPos(INPUT_COL,INPUT_ROW);
#endif
    ClearEOL;
 7c6:	8a e8       	ldi	r24, 0x8A	; 138
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 ff 06 	call	0xdfe	; 0xdfe <PrintStringP>
    PrintString(PROMPT);
 7ce:	8e ec       	ldi	r24, 0xCE	; 206
 7d0:	94 e0       	ldi	r25, 0x04	; 4
 7d2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
    }
 7d6:	08 95       	ret

000007d8 <ProcessSerialInput>:
//
// Inputs:      Serial input char to process
//
// Outputs:     None.
//
void ProcessSerialInput(char InChar) {
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <ProcessSerialInput+0xa>
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <ProcessSerialInput+0xc>
 7e4:	00 d0       	rcall	.+0      	; 0x7e6 <ProcessSerialInput+0xe>
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
 7ea:	08 2f       	mov	r16, r24
    //
    // Always ignore NUL characters. This can be noise on the serial
    //   line, or (more probably) the caller not bothering to check
    //   the return value from the input routine.
    //
    if( InChar == 0 )
 7ec:	88 23       	and	r24, r24
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <ProcessSerialInput+0x1a>
 7f0:	59 c0       	rjmp	.+178    	; 0x8a4 <ProcessSerialInput+0xcc>
        return;

    //
    // Always accept BS character as "Erase previous character"
    //
    if( InChar == BACKSPACE ) {
 7f2:	88 30       	cpi	r24, 0x08	; 8
 7f4:	c9 f4       	brne	.+50     	; 0x828 <ProcessSerialInput+0x50>
        if( nChars != 0 ) {        // If not at start of line
 7f6:	e0 91 3f 05 	lds	r30, 0x053F
 7fa:	f0 91 40 05 	lds	r31, 0x0540
 7fe:	30 97       	sbiw	r30, 0x00	; 0
 800:	09 f4       	brne	.+2      	; 0x804 <ProcessSerialInput+0x2c>
 802:	50 c0       	rjmp	.+160    	; 0x8a4 <ProcessSerialInput+0xcc>
            PlotCursor();
            LineBuffer[--nChars] = 0;
 804:	31 97       	sbiw	r30, 0x01	; 1
 806:	f0 93 40 05 	sts	0x0540, r31
 80a:	e0 93 3f 05 	sts	0x053F, r30
 80e:	e6 52       	subi	r30, 0x26	; 38
 810:	fb 4f       	sbci	r31, 0xFB	; 251
 812:	10 82       	st	Z, r1
            TempOutLine[0] = BACKSPACE;
 814:	89 83       	std	Y+1, r24	; 0x01
            TempOutLine[1] = ' ';
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	8a 83       	std	Y+2, r24	; 0x02
            TempOutLine[2] = BACKSPACE;
 81a:	0b 83       	std	Y+3, r16	; 0x03
            TempOutLine[3] = 0;
 81c:	1c 82       	std	Y+4, r1	; 0x04
            PrintString(TempOutLine);
 81e:	ce 01       	movw	r24, r28
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>
 826:	3e c0       	rjmp	.+124    	; 0x8a4 <ProcessSerialInput+0xcc>
        }

    //
    // Setup to echo the characters.
    //
    if( InChar == '\r' ) {              // Switch \r to \r\n
 828:	8d 30       	cpi	r24, 0x0D	; 13
 82a:	29 f4       	brne	.+10     	; 0x836 <ProcessSerialInput+0x5e>
        TempOutLine[0] = '\r';
 82c:	89 83       	std	Y+1, r24	; 0x01
        TempOutLine[1] = '\n';
 82e:	8a e0       	ldi	r24, 0x0A	; 10
 830:	8a 83       	std	Y+2, r24	; 0x02
        TempOutLine[2] = 0;
 832:	1b 82       	std	Y+3, r1	; 0x03
 834:	06 c0       	rjmp	.+12     	; 0x842 <ProcessSerialInput+0x6a>
        }
    else if( InChar != '\n' ) {         // And print nothing for \n
 836:	8a 30       	cpi	r24, 0x0A	; 10
 838:	19 f0       	breq	.+6      	; 0x840 <ProcessSerialInput+0x68>
        TempOutLine[0] = InChar;
 83a:	89 83       	std	Y+1, r24	; 0x01
        TempOutLine[1] = 0;
 83c:	1a 82       	std	Y+2, r1	; 0x02
 83e:	01 c0       	rjmp	.+2      	; 0x842 <ProcessSerialInput+0x6a>
        }
    else TempOutLine[0] = 0;
 840:	19 82       	std	Y+1, r1	; 0x01

    PlotCursor();
    PrintString(TempOutLine);
 842:	ce 01       	movw	r24, r28
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	0e 94 0d 07 	call	0xe1a	; 0xe1a <PrintString>

    //
    // In the lingo of the system, a '\r' indicates EOL
    //
    if( InChar == '\r' || InChar == ESC ) {
 84a:	0d 30       	cpi	r16, 0x0D	; 13
 84c:	41 f0       	breq	.+16     	; 0x85e <ProcessSerialInput+0x86>
 84e:	0b 31       	cpi	r16, 0x1B	; 27
 850:	b9 f4       	brne	.+46     	; 0x880 <ProcessSerialInput+0xa8>
        //
        // ESC causes us to clear the line buffer and process ESC
        //   as a command.
        //
        if( InChar == ESC ) 
            strcpy(LineBuffer,ESC_CMD);
 852:	8a ed       	ldi	r24, 0xDA	; 218
 854:	94 e0       	ldi	r25, 0x04	; 4
 856:	64 ed       	ldi	r22, 0xD4	; 212
 858:	74 e0       	ldi	r23, 0x04	; 4
 85a:	0e 94 2c 07 	call	0xe58	; 0xe58 <strcpy>

        SerialCommand(LineBuffer);
 85e:	0a ed       	ldi	r16, 0xDA	; 218
 860:	14 e0       	ldi	r17, 0x04	; 4
 862:	c8 01       	movw	r24, r16
 864:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SerialCommand>
//
// Outputs:     None.
//
static void InitLineBuffer() {

    memset(LineBuffer,0,sizeof(LineBuffer));
 868:	85 e6       	ldi	r24, 0x65	; 101
 86a:	f8 01       	movw	r30, r16
 86c:	11 92       	st	Z+, r1
 86e:	8a 95       	dec	r24
 870:	e9 f7       	brne	.-6      	; 0x86c <ProcessSerialInput+0x94>
    nChars = 0;
 872:	10 92 40 05 	sts	0x0540, r1
 876:	10 92 3f 05 	sts	0x053F, r1
        if( InChar == ESC ) 
            strcpy(LineBuffer,ESC_CMD);

        SerialCommand(LineBuffer);
        InitLineBuffer();
        Prompt();
 87a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Prompt>
 87e:	12 c0       	rjmp	.+36     	; 0x8a4 <ProcessSerialInput+0xcc>
        return;
        }
    else if (InChar == '\n')               // Do not add \n characters to
 880:	0a 30       	cpi	r16, 0x0A	; 10
 882:	81 f0       	breq	.+32     	; 0x8a4 <ProcessSerialInput+0xcc>

    //
    // Not a TERMINATOR character, must be part of a COMMAND.  Add it to the
    //   line buffer string if there is room.
    //
    if( nChars < MAX_CMD_LENGTH )
 884:	80 91 3f 05 	lds	r24, 0x053F
 888:	90 91 40 05 	lds	r25, 0x0540
 88c:	84 36       	cpi	r24, 0x64	; 100
 88e:	91 05       	cpc	r25, r1
 890:	4c f4       	brge	.+18     	; 0x8a4 <ProcessSerialInput+0xcc>
        LineBuffer[nChars++] = InChar;
 892:	fc 01       	movw	r30, r24
 894:	e6 52       	subi	r30, 0x26	; 38
 896:	fb 4f       	sbci	r31, 0xFB	; 251
 898:	00 83       	st	Z, r16
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	90 93 40 05 	sts	0x0540, r25
 8a0:	80 93 3f 05 	sts	0x053F, r24
    }
 8a4:	26 96       	adiw	r28, 0x06	; 6
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	f8 94       	cli
 8aa:	de bf       	out	0x3e, r29	; 62
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	cd bf       	out	0x3d, r28	; 61
 8b0:	cf 91       	pop	r28
 8b2:	df 91       	pop	r29
 8b4:	1f 91       	pop	r17
 8b6:	0f 91       	pop	r16
 8b8:	08 95       	ret

000008ba <GetLineInit>:
//
// Outputs:     None.
//
static void InitLineBuffer() {

    memset(LineBuffer,0,sizeof(LineBuffer));
 8ba:	85 e6       	ldi	r24, 0x65	; 101
 8bc:	ea ed       	ldi	r30, 0xDA	; 218
 8be:	f4 e0       	ldi	r31, 0x04	; 4
 8c0:	df 01       	movw	r26, r30
 8c2:	1d 92       	st	X+, r1
 8c4:	8a 95       	dec	r24
 8c6:	e9 f7       	brne	.-6      	; 0x8c2 <GetLineInit+0x8>
    nChars = 0;
 8c8:	10 92 40 05 	sts	0x0540, r1
 8cc:	10 92 3f 05 	sts	0x053F, r1
// Outputs:     None.
//
void GetLineInit() {

    InitLineBuffer();
    Prompt();
 8d0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <Prompt>
    }
 8d4:	08 95       	ret

000008d6 <StrEQ>:
//              Char string to check against
//
// Outputs:     TRUE  if strings are equal
//              FALSE otherwise
//
bool StrEQ(const char *String1, const char *String2) {
 8d6:	df 92       	push	r13
 8d8:	ef 92       	push	r14
 8da:	ff 92       	push	r15
 8dc:	0f 93       	push	r16
 8de:	1f 93       	push	r17
 8e0:	cf 93       	push	r28
 8e2:	df 93       	push	r29
 8e4:	7c 01       	movw	r14, r24
 8e6:	eb 01       	movw	r28, r22
 8e8:	21 c0       	rjmp	.+66     	; 0x92c <__stack+0x2d>

    while( *String1 != 0 ) {
        char    c1 = *String1++;
        char    c2 = *String2++;
 8ea:	d0 2e       	mov	r13, r16

        if( c1 == ' ' )
 8ec:	10 32       	cpi	r17, 0x20	; 32
 8ee:	31 f1       	breq	.+76     	; 0x93c <__stack+0x3d>
            return(true);

        if( isalpha(c1) ) c1 = toupper(c1);
 8f0:	81 2f       	mov	r24, r17
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 57 07 	call	0xeae	; 0xeae <isalpha>
 8f8:	89 2b       	or	r24, r25
 8fa:	29 f0       	breq	.+10     	; 0x906 <__stack+0x7>
 8fc:	81 2f       	mov	r24, r17
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 71 07 	call	0xee2	; 0xee2 <toupper>
 904:	18 2f       	mov	r17, r24
        if( isalpha(c2) ) c2 = toupper(c2);
 906:	80 2f       	mov	r24, r16
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	0e 94 57 07 	call	0xeae	; 0xeae <isalpha>
 90e:	89 2b       	or	r24, r25
 910:	29 f0       	breq	.+10     	; 0x91c <__stack+0x1d>
 912:	80 2f       	mov	r24, r16
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 71 07 	call	0xee2	; 0xee2 <toupper>
 91a:	d8 2e       	mov	r13, r24

        if( c1 != c2 ) 
 91c:	1d 15       	cp	r17, r13
 91e:	11 f0       	breq	.+4      	; 0x924 <__stack+0x25>
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0x3f>
//              FALSE otherwise
//
bool StrEQ(const char *String1, const char *String2) {

    while( *String1 != 0 ) {
        char    c1 = *String1++;
 924:	08 94       	sec
 926:	e1 1c       	adc	r14, r1
 928:	f1 1c       	adc	r15, r1
        char    c2 = *String2++;
 92a:	21 96       	adiw	r28, 0x01	; 1
// Outputs:     TRUE  if strings are equal
//              FALSE otherwise
//
bool StrEQ(const char *String1, const char *String2) {

    while( *String1 != 0 ) {
 92c:	f7 01       	movw	r30, r14
 92e:	10 81       	ld	r17, Z
 930:	08 81       	ld	r16, Y
 932:	11 23       	and	r17, r17
 934:	d1 f6       	brne	.-76     	; 0x8ea <StrEQ+0x14>
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	00 23       	and	r16, r16
 93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x3f>
 93c:	81 e0       	ldi	r24, 0x01	; 1
    //
    if( *String2 != 0 ) 
        return(false);

    return(true);
    }
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	df 90       	pop	r13
 94c:	08 95       	ret

0000094e <PutI2C>:
void PutI2C(uint8_t SlaveAddr, uint8_t nBytes,uint8_t *Buffer, bool NoStop) {

    //
    // Send start signal and wait for response.
    //
    I2C.SlaveAddr = SlaveAddr << 1;         // Low order bit clr ==> Write
 94e:	88 0f       	add	r24, r24
 950:	80 93 85 06 	sts	0x0685, r24
    I2C.nBytes    = nBytes;
 954:	60 93 86 06 	sts	0x0686, r22
    I2C.Buffer    = Buffer;
 958:	50 93 88 06 	sts	0x0688, r21
 95c:	40 93 87 06 	sts	0x0687, r20
    I2C.Status    = I2C_WORKING;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	80 93 8a 06 	sts	0x068A, r24
    I2C.NoStop    = NoStop;
 966:	20 93 89 06 	sts	0x0689, r18

    INIT_DEBUG;

    START_I2C;
 96a:	ec eb       	ldi	r30, 0xBC	; 188
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	80 6a       	ori	r24, 0xA0	; 160
 972:	80 83       	st	Z, r24
    }
 974:	08 95       	ret

00000976 <GetI2C>:
void GetI2C(uint8_t SlaveAddr, uint8_t nBytes,uint8_t *Buffer) {

    //
    // Send start signal and wait for response.
    //
    I2C.SlaveAddr = (SlaveAddr << 1) | 1;   // Low order bit set ==> Read
 976:	88 0f       	add	r24, r24
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	80 93 85 06 	sts	0x0685, r24
    I2C.nBytes    = nBytes;
 97e:	60 93 86 06 	sts	0x0686, r22
    I2C.Buffer    = Buffer;
 982:	50 93 88 06 	sts	0x0688, r21
 986:	40 93 87 06 	sts	0x0687, r20
    I2C.Status    = I2C_WORKING;
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	80 93 8a 06 	sts	0x068A, r24

    INIT_DEBUG;

    START_I2C;
 990:	ec eb       	ldi	r30, 0xBC	; 188
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	80 6a       	ori	r24, 0xA0	; 160
 998:	80 83       	st	Z, r24
    }
 99a:	08 95       	ret

0000099c <I2CBusy>:
// Inputs:      None
//
// Outputs:     TRUE  if I2C is busy sending output
//              FALSE if I2C is idle
//
bool I2CBusy(void) { return I2C.Status == I2C_WORKING; }
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	80 91 8a 06 	lds	r24, 0x068A
 9a2:	81 30       	cpi	r24, 0x01	; 1
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <I2CBusy+0xc>
 9a6:	91 e0       	ldi	r25, 0x01	; 1
 9a8:	89 2f       	mov	r24, r25
 9aa:	08 95       	ret

000009ac <I2CStatus>:
//
// Inputs:      None
//
// Outputs:     Status (could be I2C_Working, or status of last op)
//
I2C_STATUS I2CStatus(void) { return I2C.Status; }
 9ac:	80 91 8a 06 	lds	r24, 0x068A
 9b0:	08 95       	ret

000009b2 <__vector_24>:
//
// Inputs:      None. (ISR)
//
// Outputs:     None.
//
ISR(TWI_vect) {
 9b2:	1f 92       	push	r1
 9b4:	0f 92       	push	r0
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	0f 92       	push	r0
 9ba:	11 24       	eor	r1, r1
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	ef 93       	push	r30
 9c2:	ff 93       	push	r31
    uint8_t Status = TWSR & (~(_PIN_MASK(TWPS0) | _PIN_MASK(TWPS1)));
 9c4:	80 91 b9 00 	lds	r24, 0x00B9

    ADD_DEBUG(Status);
    ADD_DEBUG(TWCR);

    switch(Status) {
 9c8:	8c 7f       	andi	r24, 0xFC	; 252
 9ca:	88 32       	cpi	r24, 0x28	; 40
 9cc:	71 f1       	breq	.+92     	; 0xa2a <__vector_24+0x78>
 9ce:	89 32       	cpi	r24, 0x29	; 41
 9d0:	88 f4       	brcc	.+34     	; 0x9f4 <__vector_24+0x42>
 9d2:	80 31       	cpi	r24, 0x10	; 16
 9d4:	11 f1       	breq	.+68     	; 0xa1a <__vector_24+0x68>
 9d6:	81 31       	cpi	r24, 0x11	; 17
 9d8:	38 f4       	brcc	.+14     	; 0x9e8 <__vector_24+0x36>
 9da:	88 23       	and	r24, r24
 9dc:	09 f4       	brne	.+2      	; 0x9e0 <__vector_24+0x2e>
 9de:	72 c0       	rjmp	.+228    	; 0xac4 <__vector_24+0x112>
 9e0:	88 30       	cpi	r24, 0x08	; 8
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__vector_24+0x34>
 9e4:	77 c0       	rjmp	.+238    	; 0xad4 <__vector_24+0x122>
 9e6:	19 c0       	rjmp	.+50     	; 0xa1a <__vector_24+0x68>
 9e8:	88 31       	cpi	r24, 0x18	; 24
 9ea:	f9 f0       	breq	.+62     	; 0xa2a <__vector_24+0x78>
 9ec:	80 32       	cpi	r24, 0x20	; 32
 9ee:	09 f0       	breq	.+2      	; 0x9f2 <__vector_24+0x40>
 9f0:	71 c0       	rjmp	.+226    	; 0xad4 <__vector_24+0x122>
 9f2:	36 c0       	rjmp	.+108    	; 0xa60 <__vector_24+0xae>
 9f4:	80 34       	cpi	r24, 0x40	; 64
 9f6:	e1 f1       	breq	.+120    	; 0xa70 <__vector_24+0xbe>
 9f8:	81 34       	cpi	r24, 0x41	; 65
 9fa:	30 f4       	brcc	.+12     	; 0xa08 <__vector_24+0x56>
 9fc:	80 33       	cpi	r24, 0x30	; 48
 9fe:	91 f1       	breq	.+100    	; 0xa64 <__vector_24+0xb2>
 a00:	88 33       	cpi	r24, 0x38	; 56
 a02:	09 f0       	breq	.+2      	; 0xa06 <__vector_24+0x54>
 a04:	67 c0       	rjmp	.+206    	; 0xad4 <__vector_24+0x122>
 a06:	30 c0       	rjmp	.+96     	; 0xa68 <__vector_24+0xb6>
 a08:	80 35       	cpi	r24, 0x50	; 80
 a0a:	09 f4       	brne	.+2      	; 0xa0e <__vector_24+0x5c>
 a0c:	40 c0       	rjmp	.+128    	; 0xa8e <__vector_24+0xdc>
 a0e:	88 35       	cpi	r24, 0x58	; 88
 a10:	f1 f1       	breq	.+124    	; 0xa8e <__vector_24+0xdc>
 a12:	88 34       	cpi	r24, 0x48	; 72
 a14:	09 f0       	breq	.+2      	; 0xa18 <__vector_24+0x66>
 a16:	5e c0       	rjmp	.+188    	; 0xad4 <__vector_24+0x122>
 a18:	23 c0       	rjmp	.+70     	; 0xa60 <__vector_24+0xae>
        //
        // Turn off start, send slave address
        //
        case TW_START:
        case TW_REP_START:
            TWDR = I2C.SlaveAddr;
 a1a:	80 91 85 06 	lds	r24, 0x0685
 a1e:	80 93 bb 00 	sts	0x00BB, r24
            _CLR_BIT(TWCR,TWSTA);           // Indirectly clears TWINT as well :-)
 a22:	80 91 bc 00 	lds	r24, 0x00BC
 a26:	8f 7d       	andi	r24, 0xDF	; 223
 a28:	53 c0       	rjmp	.+166    	; 0xad0 <__vector_24+0x11e>
        case TW_MT_SLA_ACK:
        case TW_MT_DATA_ACK:
            //
            // If no more bytes to send, send STOP to finish transfer.
            //
            if( I2C.nBytes == 0 ) {
 a2a:	90 91 86 06 	lds	r25, 0x0686
 a2e:	99 23       	and	r25, r25
 a30:	41 f4       	brne	.+16     	; 0xa42 <__vector_24+0x90>
                I2C.Status = I2C_COMPLETE;
 a32:	10 92 8a 06 	sts	0x068A, r1
                //   caller to setup an address (via PutI2C) and immediately
                //   read data from a slave. Such as an EEPROM.
                //
                // Caller will make a 2nd I2C call, resulting in a restart.
                //
                if( !I2C.NoStop )
 a36:	80 91 89 06 	lds	r24, 0x0689
 a3a:	88 23       	and	r24, r24
 a3c:	09 f0       	breq	.+2      	; 0xa40 <__vector_24+0x8e>
 a3e:	4a c0       	rjmp	.+148    	; 0xad4 <__vector_24+0x122>
 a40:	44 c0       	rjmp	.+136    	; 0xaca <__vector_24+0x118>
                }

            //
            // Otherwise, send [more] data to the slave
            //
            TWDR = *I2C.Buffer++;
 a42:	e0 91 87 06 	lds	r30, 0x0687
 a46:	f0 91 88 06 	lds	r31, 0x0688
 a4a:	81 91       	ld	r24, Z+
 a4c:	80 93 bb 00 	sts	0x00BB, r24
 a50:	f0 93 88 06 	sts	0x0688, r31
 a54:	e0 93 87 06 	sts	0x0687, r30
            I2C.nBytes--;
 a58:	91 50       	subi	r25, 0x01	; 1
 a5a:	90 93 86 06 	sts	0x0686, r25
 a5e:	13 c0       	rjmp	.+38     	; 0xa86 <__vector_24+0xd4>
        // TW_MT_SLA_NACK - No slave acknowledged address (transmit)
        // TW_MR_SLA_NACK - No slave acknowledged address ( receive)
        //
        case TW_MT_SLA_NACK:
        case TW_MR_SLA_NACK:
            I2C.Status = I2C_NO_SLAVE_ACK;
 a60:	82 e0       	ldi	r24, 0x02	; 2
 a62:	31 c0       	rjmp	.+98     	; 0xac6 <__vector_24+0x114>
        //////////////////////////////////////////////////////////////////////////////////
        //
        // TW_MT_DATA_NACK - Slave didn't acknowledge data (transmit)
        //
        case TW_MT_DATA_NACK:
            I2C.Status = I2C_SLAVE_DATA_NACK;
 a64:	83 e0       	ldi	r24, 0x03	; 3
 a66:	2f c0       	rjmp	.+94     	; 0xac6 <__vector_24+0x114>
        //
        // Enter slave mode by stepping the I2C. We don't need to send a STOP, because
        //   we've lost arbitration.
        //
        case TW_ARB_LOST:
            I2C.Status = I2C_ARB_LOST;
 a68:	85 e0       	ldi	r24, 0x05	; 5
 a6a:	80 93 8a 06 	sts	0x068A, r24
 a6e:	0b c0       	rjmp	.+22     	; 0xa86 <__vector_24+0xd4>
        case TW_MR_SLA_ACK:
            //
            // Special case - if ZERO bytes are to be read, don't step the byte
            //   reading mechanism (below). Just stop the transfer and return.
            //
            if( I2C.nBytes == 0 ) {
 a70:	80 91 86 06 	lds	r24, 0x0686
 a74:	88 23       	and	r24, r24
 a76:	19 f1       	breq	.+70     	; 0xabe <__vector_24+0x10c>
                }

            //
            // Otherwise, setup to ACK all bytes except the last, which gets NACK.
            //
            if( I2C.nBytes == 1 ) { _CLR_BIT(TWCR,TWEA); }  // Last byte gets NACK
 a78:	81 30       	cpi	r24, 0x01	; 1
 a7a:	d9 f0       	breq	.+54     	; 0xab2 <__vector_24+0x100>
            else                  { _SET_BIT(TWCR,TWEA); }  // Enable ack of data
 a7c:	80 91 bc 00 	lds	r24, 0x00BC
 a80:	80 64       	ori	r24, 0x40	; 64
 a82:	80 93 bc 00 	sts	0x00BC, r24
            STEP_I2C;
 a86:	80 91 bc 00 	lds	r24, 0x00BC
 a8a:	80 68       	ori	r24, 0x80	; 128
 a8c:	21 c0       	rjmp	.+66     	; 0xad0 <__vector_24+0x11e>
        case TW_MR_DATA_ACK:
        case TW_MR_DATA_NACK:
            //
            // Get the sent byte
            //
            *I2C.Buffer++ = TWDR;
 a8e:	80 91 bb 00 	lds	r24, 0x00BB
 a92:	e0 91 87 06 	lds	r30, 0x0687
 a96:	f0 91 88 06 	lds	r31, 0x0688
 a9a:	81 93       	st	Z+, r24
 a9c:	f0 93 88 06 	sts	0x0688, r31
 aa0:	e0 93 87 06 	sts	0x0687, r30
            I2C.nBytes--;
 aa4:	80 91 86 06 	lds	r24, 0x0686
 aa8:	81 50       	subi	r24, 0x01	; 1
 aaa:	80 93 86 06 	sts	0x0686, r24

            //
            // Send a NACK on the last data byte
            //
            if( I2C.nBytes == 1 )
 aae:	81 30       	cpi	r24, 0x01	; 1
 ab0:	21 f4       	brne	.+8      	; 0xaba <__vector_24+0x108>
                _CLR_BIT(TWCR,TWEA);
 ab2:	80 91 bc 00 	lds	r24, 0x00BC
 ab6:	8f 7b       	andi	r24, 0xBF	; 191
 ab8:	e4 cf       	rjmp	.-56     	; 0xa82 <__vector_24+0xd0>


            //
            // If no more bytes to get, send STOP to finish transfer.
            //
            if( I2C.nBytes == 0 ) {
 aba:	88 23       	and	r24, r24
 abc:	21 f7       	brne	.-56     	; 0xa86 <__vector_24+0xd4>
                I2C.Status = I2C_COMPLETE;
 abe:	10 92 8a 06 	sts	0x068A, r1
 ac2:	03 c0       	rjmp	.+6      	; 0xaca <__vector_24+0x118>
        //////////////////////////////////////////////////////////////////////////////////
        //
        // TW_BUS_ERROR - [TWI] Bus error. Stop and return error
        //
        case TW_BUS_ERROR:
            I2C.Status = I2C_BUS_ERROR;
 ac4:	86 e0       	ldi	r24, 0x06	; 6
 ac6:	80 93 8a 06 	sts	0x068A, r24
            STOP_I2C;
 aca:	80 91 bc 00 	lds	r24, 0x00BC
 ace:	80 69       	ori	r24, 0x90	; 144
 ad0:	80 93 bc 00 	sts	0x00BC, r24
            ADD_DEBUG(I2C.SlaveAddr);
            return;
        }

    }
 ad4:	ff 91       	pop	r31
 ad6:	ef 91       	pop	r30
 ad8:	9f 91       	pop	r25
 ada:	8f 91       	pop	r24
 adc:	0f 90       	pop	r0
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	0f 90       	pop	r0
 ae2:	1f 90       	pop	r1
 ae4:	18 95       	reti

00000ae6 <I2CInit>:
//
// Inputs:      None.
//
// Outputs:     None.
//
void I2CInit(uint8_t KHz, uint8_t OurAddr, bool UseInternalPullups) {
 ae6:	1f 93       	push	r17
 ae8:	28 2f       	mov	r18, r24
 aea:	16 2f       	mov	r17, r22

    memset(&I2C,0,sizeof(I2C));
 aec:	86 e0       	ldi	r24, 0x06	; 6
 aee:	e5 e8       	ldi	r30, 0x85	; 133
 af0:	f6 e0       	ldi	r31, 0x06	; 6
 af2:	df 01       	movw	r26, r30
 af4:	1d 92       	st	X+, r1
 af6:	8a 95       	dec	r24
 af8:	e9 f7       	brne	.-6      	; 0xaf4 <I2CInit+0xe>

    _CLR_BIT(PRR,PRTWI);                    // Power up the I2C
 afa:	80 91 64 00 	lds	r24, 0x0064
 afe:	8f 77       	andi	r24, 0x7F	; 127
 b00:	80 93 64 00 	sts	0x0064, r24

    //
    // Enable internal pullups if requested
    //
    if( UseInternalPullups ) {
 b04:	44 23       	and	r20, r20
 b06:	31 f0       	breq	.+12     	; 0xb14 <I2CInit+0x2e>
        _CLR_BIT(          MCUCR,     PUD); // Clear disable pullup flag
 b08:	85 b7       	in	r24, 0x35	; 53
 b0a:	8f 7e       	andi	r24, 0xEF	; 239
 b0c:	85 bf       	out	0x35, r24	; 53
        _SET_BIT(_PORT(TWI_PORT), SCL_BIT); // Set to enable pullups
 b0e:	45 9a       	sbi	0x08, 5	; 8
        _SET_BIT(_PORT(TWI_PORT), SDA_BIT); // Set to enable pullups
 b10:	44 9a       	sbi	0x08, 4	; 8
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <I2CInit+0x32>
    //
    // Enable pullups if requested (above), but don't *disable* them if
    //   not needed (that's the caller's responsibility).
    //
    else {
        _CLR_BIT(_PORT(TWI_PORT), SCL_BIT); // Set to disable pullups
 b14:	45 98       	cbi	0x08, 5	; 8
        _CLR_BIT(_PORT(TWI_PORT), SDA_BIT); // Set to disable pullups
 b16:	44 98       	cbi	0x08, 4	; 8
        }

    //
    // Set bitrate in KHz.
    //
    _CLR_BIT(TWSR,TWPS0);       // Prescaler => 1
 b18:	80 91 b9 00 	lds	r24, 0x00B9
 b1c:	8e 7f       	andi	r24, 0xFE	; 254
 b1e:	80 93 b9 00 	sts	0x00B9, r24
    _CLR_BIT(TWSR,TWPS1);
 b22:	80 91 b9 00 	lds	r24, 0x00B9
 b26:	8d 7f       	andi	r24, 0xFD	; 253
 b28:	80 93 b9 00 	sts	0x00B9, r24

    TWBR = (F_CPU/(1000*KHz) - 16)/2;
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	88 ee       	ldi	r24, 0xE8	; 232
 b30:	93 e0       	ldi	r25, 0x03	; 3
 b32:	a9 01       	movw	r20, r18
 b34:	48 9f       	mul	r20, r24
 b36:	90 01       	movw	r18, r0
 b38:	49 9f       	mul	r20, r25
 b3a:	30 0d       	add	r19, r0
 b3c:	58 9f       	mul	r21, r24
 b3e:	30 0d       	add	r19, r0
 b40:	11 24       	eor	r1, r1
 b42:	44 27       	eor	r20, r20
 b44:	37 fd       	sbrc	r19, 7
 b46:	40 95       	com	r20
 b48:	54 2f       	mov	r21, r20
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	74 e2       	ldi	r23, 0x24	; 36
 b4e:	84 ef       	ldi	r24, 0xF4	; 244
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 33 07 	call	0xe66	; 0xe66 <__udivmodsi4>
 b56:	20 51       	subi	r18, 0x10	; 16
 b58:	30 40       	sbci	r19, 0x00	; 0
 b5a:	40 40       	sbci	r20, 0x00	; 0
 b5c:	50 40       	sbci	r21, 0x00	; 0
 b5e:	56 95       	lsr	r21
 b60:	47 95       	ror	r20
 b62:	37 95       	ror	r19
 b64:	27 95       	ror	r18
 b66:	20 93 b8 00 	sts	0x00B8, r18

    //
    // Enable TWI (two-wire interface), enable interrupts
    //
    I2C.Status = I2C_COMPLETE;
 b6a:	10 92 8a 06 	sts	0x068A, r1

    _SET_BIT(TWCR,TWEN);        // Enable TWI
 b6e:	80 91 bc 00 	lds	r24, 0x00BC
 b72:	84 60       	ori	r24, 0x04	; 4
 b74:	80 93 bc 00 	sts	0x00BC, r24
    _SET_BIT(TWCR,TWIE);        // Enable Interrupts
 b78:	80 91 bc 00 	lds	r24, 0x00BC
 b7c:	81 60       	ori	r24, 0x01	; 1
 b7e:	80 93 bc 00 	sts	0x00BC, r24

    //
    // Enable ACK of received bytes
    //
    TWAR = OurAddr;
 b82:	10 93 ba 00 	sts	0x00BA, r17
    _CLR_BIT(TWCR,TWEA);
 b86:	80 91 bc 00 	lds	r24, 0x00BC
 b8a:	8f 7b       	andi	r24, 0xBF	; 191
 b8c:	80 93 bc 00 	sts	0x00BC, r24

    INIT_DEBUG;
    }
 b90:	1f 91       	pop	r17
 b92:	08 95       	ret

00000b94 <ParseInit>:
//
// Outputs:     None.
//
void ParseInit(char *Buffer) {

    LineBuffer = Buffer;
 b94:	90 93 8c 06 	sts	0x068C, r25
 b98:	80 93 8b 06 	sts	0x068B, r24
    }
 b9c:	08 95       	ret

00000b9e <ParseToken>:
// Inputs:      None.
//
// Outputs:     Ptr to next token in command buffer
//              Empty string if no more tokens
//
char *ParseToken() {
 b9e:	cf 92       	push	r12
 ba0:	df 92       	push	r13
 ba2:	ff 92       	push	r15
 ba4:	0f 93       	push	r16
 ba6:	1f 93       	push	r17
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
    char    *TokenPtr = Token;

    memset(Token,0,sizeof(Token));
 bac:	8a e0       	ldi	r24, 0x0A	; 10
 bae:	ed e8       	ldi	r30, 0x8D	; 141
 bb0:	f6 e0       	ldi	r31, 0x06	; 6
 bb2:	df 01       	movw	r26, r30
 bb4:	1d 92       	st	X+, r1
 bb6:	8a 95       	dec	r24
 bb8:	e9 f7       	brne	.-6      	; 0xbb4 <ParseToken+0x16>
 bba:	05 c0       	rjmp	.+10     	; 0xbc6 <ParseToken+0x28>
    //
    // Note that strchr (in IsDelimiter) considers the NUL a searchable
    //   character, so we have to make a special case for it.
    //
    while( *LineBuffer != 0 && IsDelimiter(*LineBuffer) )
        LineBuffer++;
 bbc:	21 96       	adiw	r28, 0x01	; 1
 bbe:	d0 93 8c 06 	sts	0x068C, r29
 bc2:	c0 93 8b 06 	sts	0x068B, r28
    // Start by skipping over any existing delimiters.
    //
    // Note that strchr (in IsDelimiter) considers the NUL a searchable
    //   character, so we have to make a special case for it.
    //
    while( *LineBuffer != 0 && IsDelimiter(*LineBuffer) )
 bc6:	c0 91 8b 06 	lds	r28, 0x068B
 bca:	d0 91 8c 06 	lds	r29, 0x068C
 bce:	68 81       	ld	r22, Y
 bd0:	66 23       	and	r22, r22
 bd2:	89 f0       	breq	.+34     	; 0xbf6 <ParseToken+0x58>
 bd4:	86 ed       	ldi	r24, 0xD6	; 214
 bd6:	94 e0       	ldi	r25, 0x04	; 4
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	0e 94 21 07 	call	0xe42	; 0xe42 <strchr>
 bde:	00 97       	sbiw	r24, 0x00	; 0
 be0:	69 f7       	brne	.-38     	; 0xbbc <ParseToken+0x1e>
 be2:	09 c0       	rjmp	.+18     	; 0xbf6 <ParseToken+0x58>
    //   lengths and such
    //
    while( *LineBuffer != 0                 &&
           !IsDelimiter(*LineBuffer)        &&
            strlen(Token) < MAX_TOKEN_LENGTH ) {
        *TokenPtr++ = *LineBuffer++;
 be4:	f8 01       	movw	r30, r16
 be6:	f1 92       	st	Z+, r15
 be8:	8f 01       	movw	r16, r30
 bea:	21 96       	adiw	r28, 0x01	; 1
 bec:	d0 93 8c 06 	sts	0x068C, r29
 bf0:	c0 93 8b 06 	sts	0x068B, r28
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <ParseToken+0x5e>
 bf6:	0d e8       	ldi	r16, 0x8D	; 141
 bf8:	16 e0       	ldi	r17, 0x06	; 6

    //
    // Now move token chars into Token array, while keeping track of
    //   lengths and such
    //
    while( *LineBuffer != 0                 &&
 bfa:	68 01       	movw	r12, r16
 bfc:	c0 91 8b 06 	lds	r28, 0x068B
 c00:	d0 91 8c 06 	lds	r29, 0x068C
 c04:	f8 80       	ld	r15, Y
 c06:	ff 20       	and	r15, r15
 c08:	89 f0       	breq	.+34     	; 0xc2c <ParseToken+0x8e>
 c0a:	86 ed       	ldi	r24, 0xD6	; 214
 c0c:	94 e0       	ldi	r25, 0x04	; 4
 c0e:	6f 2d       	mov	r22, r15
 c10:	70 e0       	ldi	r23, 0x00	; 0
 c12:	0e 94 21 07 	call	0xe42	; 0xe42 <strchr>
 c16:	00 97       	sbiw	r24, 0x00	; 0
 c18:	49 f4       	brne	.+18     	; 0xc2c <ParseToken+0x8e>
 c1a:	f6 01       	movw	r30, r12
 c1c:	01 90       	ld	r0, Z+
 c1e:	00 20       	and	r0, r0
 c20:	e9 f7       	brne	.-6      	; 0xc1c <ParseToken+0x7e>
 c22:	31 97       	sbiw	r30, 0x01	; 1
 c24:	ed 58       	subi	r30, 0x8D	; 141
 c26:	f6 40       	sbci	r31, 0x06	; 6
 c28:	3a 97       	sbiw	r30, 0x0a	; 10
 c2a:	e0 f2       	brcs	.-72     	; 0xbe4 <ParseToken+0x46>
            strlen(Token) < MAX_TOKEN_LENGTH ) {
        *TokenPtr++ = *LineBuffer++;
        }

    return(Token);
    }
 c2c:	8d e8       	ldi	r24, 0x8D	; 141
 c2e:	96 e0       	ldi	r25, 0x06	; 6
 c30:	df 91       	pop	r29
 c32:	cf 91       	pop	r28
 c34:	1f 91       	pop	r17
 c36:	0f 91       	pop	r16
 c38:	ff 90       	pop	r15
 c3a:	df 90       	pop	r13
 c3c:	cf 90       	pop	r12
 c3e:	08 95       	ret

00000c40 <PrintChar>:
//
// Inputs:      Char to print
//
// Outputs:     None.
//
void PrintChar(char Char) { PutUARTByteW(Char); }
 c40:	1f 93       	push	r17
 c42:	18 2f       	mov	r17, r24
 c44:	81 2f       	mov	r24, r17
 c46:	0e 94 2e 03 	call	0x65c	; 0x65c <PutUARTByte>
 c4a:	88 23       	and	r24, r24
 c4c:	d9 f3       	breq	.-10     	; 0xc44 <PrintChar+0x4>
 c4e:	1f 91       	pop	r17
 c50:	08 95       	ret

00000c52 <PrintB>:
//
// Inputs:      Short int to print
//
// Outputs:     None.
//
void PrintB(uint8_t Byte) {
 c52:	0f 93       	push	r16
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	18 2f       	mov	r17, r24
 c5c:	c0 e0       	ldi	r28, 0x00	; 0
 c5e:	d0 e0       	ldi	r29, 0x00	; 0
    int Bit;

    for( Bit = 0; Bit < 8; Bit++ ) {
        PrintChar((Byte & 0x80) == 0 ? '0' : '1');
 c60:	01 e3       	ldi	r16, 0x31	; 49
 c62:	81 2f       	mov	r24, r17
 c64:	80 95       	com	r24
 c66:	88 1f       	adc	r24, r24
 c68:	88 27       	eor	r24, r24
 c6a:	88 1f       	adc	r24, r24
 c6c:	90 2f       	mov	r25, r16
 c6e:	98 1b       	sub	r25, r24
 c70:	89 2f       	mov	r24, r25
 c72:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
// Outputs:     None.
//
void PrintB(uint8_t Byte) {
    int Bit;

    for( Bit = 0; Bit < 8; Bit++ ) {
 c76:	21 96       	adiw	r28, 0x01	; 1
 c78:	c8 30       	cpi	r28, 0x08	; 8
 c7a:	d1 05       	cpc	r29, r1
 c7c:	11 f0       	breq	.+4      	; 0xc82 <PrintB+0x30>
        PrintChar((Byte & 0x80) == 0 ? '0' : '1');
        Byte <<= 1;
 c7e:	11 0f       	add	r17, r17
 c80:	f0 cf       	rjmp	.-32     	; 0xc62 <PrintB+0x10>
        }
    }
 c82:	df 91       	pop	r29
 c84:	cf 91       	pop	r28
 c86:	1f 91       	pop	r17
 c88:	0f 91       	pop	r16
 c8a:	08 95       	ret

00000c8c <PrintH>:
    '0', '1', '2', '3', 
    '4', '5', '6', '7', 
    '8', '9', 'A', 'B', 
    'C', 'D', 'E', 'F' };

void PrintH(uint8_t Byte) {
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	18 2f       	mov	r17, r24

    PrintChar(pgm_read_byte(HexChars + (Byte >>    4)));
 c94:	82 95       	swap	r24
 c96:	8f 70       	andi	r24, 0x0F	; 15
 c98:	ce e8       	ldi	r28, 0x8E	; 142
 c9a:	d0 e0       	ldi	r29, 0x00	; 0
 c9c:	fe 01       	movw	r30, r28
 c9e:	e8 0f       	add	r30, r24
 ca0:	f1 1d       	adc	r31, r1
 ca2:	e4 91       	lpm	r30, Z+
 ca4:	8e 2f       	mov	r24, r30
 ca6:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
    PrintChar(pgm_read_byte(HexChars + (Byte &  0x0F)));
 caa:	1f 70       	andi	r17, 0x0F	; 15
 cac:	c1 0f       	add	r28, r17
 cae:	d1 1d       	adc	r29, r1
 cb0:	fe 01       	movw	r30, r28
 cb2:	84 91       	lpm	r24, Z+
 cb4:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
    }
 cb8:	df 91       	pop	r29
 cba:	cf 91       	pop	r28
 cbc:	1f 91       	pop	r17
 cbe:	08 95       	ret

00000cc0 <PrintD>:
//
// Outputs:     None.
//
static int Divisors[] PROGMEM = { 10000, 1000, 100, 10 };

void PrintD(uint16_t Value,int8_t Width) {
 cc0:	5f 92       	push	r5
 cc2:	6f 92       	push	r6
 cc4:	7f 92       	push	r7
 cc6:	8f 92       	push	r8
 cc8:	9f 92       	push	r9
 cca:	af 92       	push	r10
 ccc:	bf 92       	push	r11
 cce:	cf 92       	push	r12
 cd0:	df 92       	push	r13
 cd2:	ef 92       	push	r14
 cd4:	ff 92       	push	r15
 cd6:	0f 93       	push	r16
 cd8:	1f 93       	push	r17
 cda:	cf 93       	push	r28
 cdc:	df 93       	push	r29
 cde:	3c 01       	movw	r6, r24
 ce0:	16 2f       	mov	r17, r22

    //
    // If the Width field is > 100, then it's a signal to pad the
    //   field with zeroes instead of spaces.
    //
    if( Width > 100 ) {
 ce2:	65 36       	cpi	r22, 0x65	; 101
 ce4:	1c f4       	brge	.+6      	; 0xcec <PrintD+0x2c>
 ce6:	60 e2       	ldi	r22, 0x20	; 32
 ce8:	56 2e       	mov	r5, r22
 cea:	03 c0       	rjmp	.+6      	; 0xcf2 <PrintD+0x32>
        Width -= 100;
 cec:	14 56       	subi	r17, 0x64	; 100
 cee:	50 e3       	ldi	r21, 0x30	; 48
 cf0:	55 2e       	mov	r5, r21
 cf2:	4e e9       	ldi	r20, 0x9E	; 158
 cf4:	a4 2e       	mov	r10, r20
 cf6:	40 e0       	ldi	r20, 0x00	; 0
 cf8:	b4 2e       	mov	r11, r20
 cfa:	00 e0       	ldi	r16, 0x00	; 0
 cfc:	35 e0       	ldi	r19, 0x05	; 5
 cfe:	e3 2e       	mov	r14, r19
 d00:	f1 2c       	mov	r15, r1
        PadChar = '0';
        }

    for( Index = 0; Index < 4; Index++ ) {
        uint16_t    Divisor = pgm_read_word(&Divisors[Index]);
 d02:	f5 01       	movw	r30, r10
 d04:	85 91       	lpm	r24, Z+
 d06:	94 91       	lpm	r25, Z+
 d08:	20 e3       	ldi	r18, 0x30	; 48
 d0a:	92 2e       	mov	r9, r18
 d0c:	03 c0       	rjmp	.+6      	; 0xd14 <PrintD+0x54>
        char        OutChar = '0';

        while( Value >= Divisor ) {
            Value -= Divisor;
 d0e:	68 1a       	sub	r6, r24
 d10:	79 0a       	sbc	r7, r25
            OutChar++;
 d12:	93 94       	inc	r9

    for( Index = 0; Index < 4; Index++ ) {
        uint16_t    Divisor = pgm_read_word(&Divisors[Index]);
        char        OutChar = '0';

        while( Value >= Divisor ) {
 d14:	68 16       	cp	r6, r24
 d16:	79 06       	cpc	r7, r25
 d18:	d0 f7       	brcc	.-12     	; 0xd0e <PrintD+0x4e>
            Value -= Divisor;
            OutChar++;
            }

        if( OutChar != '0' || CharsPrinted ) {
 d1a:	80 e3       	ldi	r24, 0x30	; 48
 d1c:	98 16       	cp	r9, r24
 d1e:	19 f4       	brne	.+6      	; 0xd26 <PrintD+0x66>
 d20:	00 23       	and	r16, r16
 d22:	09 f5       	brne	.+66     	; 0xd66 <PrintD+0xa6>
 d24:	26 c0       	rjmp	.+76     	; 0xd72 <PrintD+0xb2>
            if( CharsPrinted == 0 && Width > 0 ) {
 d26:	00 23       	and	r16, r16
 d28:	f1 f4       	brne	.+60     	; 0xd66 <PrintD+0xa6>
 d2a:	11 16       	cp	r1, r17
 d2c:	e4 f4       	brge	.+56     	; 0xd66 <PrintD+0xa6>
                uint8_t Chars = 5-Index;
                if( Width < Chars )
 d2e:	81 2f       	mov	r24, r17
 d30:	99 27       	eor	r25, r25
 d32:	87 fd       	sbrc	r24, 7
 d34:	90 95       	com	r25
 d36:	8e 15       	cp	r24, r14
 d38:	9f 05       	cpc	r25, r15
 d3a:	0c f4       	brge	.+2      	; 0xd3e <PrintD+0x7e>
 d3c:	1e 2d       	mov	r17, r14
 d3e:	c0 e0       	ldi	r28, 0x00	; 0
 d40:	d0 e0       	ldi	r29, 0x00	; 0
                    Width = Chars;
                while( Width > Chars ) {
 d42:	c1 2e       	mov	r12, r17
 d44:	dd 24       	eor	r13, r13
 d46:	c7 fc       	sbrc	r12, 7
 d48:	d0 94       	com	r13
 d4a:	04 c0       	rjmp	.+8      	; 0xd54 <PrintD+0x94>
                    PrintChar(PadChar);
 d4c:	85 2d       	mov	r24, r5
 d4e:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
 d52:	21 96       	adiw	r28, 0x01	; 1
//
// Outputs:     None.
//
static int Divisors[] PROGMEM = { 10000, 1000, 100, 10 };

void PrintD(uint16_t Value,int8_t Width) {
 d54:	81 2e       	mov	r8, r17
 d56:	8c 1a       	sub	r8, r28
        if( OutChar != '0' || CharsPrinted ) {
            if( CharsPrinted == 0 && Width > 0 ) {
                uint8_t Chars = 5-Index;
                if( Width < Chars )
                    Width = Chars;
                while( Width > Chars ) {
 d58:	c6 01       	movw	r24, r12
 d5a:	8c 1b       	sub	r24, r28
 d5c:	9d 0b       	sbc	r25, r29
 d5e:	e8 16       	cp	r14, r24
 d60:	f9 06       	cpc	r15, r25
 d62:	a4 f3       	brlt	.-24     	; 0xd4c <PrintD+0x8c>
 d64:	01 c0       	rjmp	.+2      	; 0xd68 <PrintD+0xa8>
 d66:	81 2e       	mov	r8, r17
                    PrintChar(PadChar);
                    Width--;
                    }
                }

            PrintChar(OutChar);
 d68:	89 2d       	mov	r24, r9
 d6a:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
            CharsPrinted++;
 d6e:	0f 5f       	subi	r16, 0xFF	; 255
 d70:	18 2d       	mov	r17, r8
 d72:	82 e0       	ldi	r24, 0x02	; 2
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	a8 0e       	add	r10, r24
 d78:	b9 1e       	adc	r11, r25
 d7a:	08 94       	sec
 d7c:	e1 08       	sbc	r14, r1
 d7e:	f1 08       	sbc	r15, r1
    if( Width > 100 ) {
        Width -= 100;
        PadChar = '0';
        }

    for( Index = 0; Index < 4; Index++ ) {
 d80:	91 e0       	ldi	r25, 0x01	; 1
 d82:	e9 16       	cp	r14, r25
 d84:	f1 04       	cpc	r15, r1
 d86:	09 f0       	breq	.+2      	; 0xd8a <PrintD+0xca>
 d88:	bc cf       	rjmp	.-136    	; 0xd02 <PrintD+0x42>
        }

    //
    // Print out the last character.
    //
    if( CharsPrinted == 0 && Width > 0 )
 d8a:	00 23       	and	r16, r16
 d8c:	41 f4       	brne	.+16     	; 0xd9e <PrintD+0xde>
 d8e:	11 16       	cp	r1, r17
 d90:	24 f0       	brlt	.+8      	; 0xd9a <PrintD+0xda>
 d92:	05 c0       	rjmp	.+10     	; 0xd9e <PrintD+0xde>
        while( --Width ) {
            PrintChar(PadChar);
 d94:	85 2d       	mov	r24, r5
 d96:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>

    //
    // Print out the last character.
    //
    if( CharsPrinted == 0 && Width > 0 )
        while( --Width ) {
 d9a:	11 50       	subi	r17, 0x01	; 1
 d9c:	d9 f7       	brne	.-10     	; 0xd94 <PrintD+0xd4>
            PrintChar(PadChar);
            }

    PrintChar('0' + Value);
 d9e:	86 2d       	mov	r24, r6
 da0:	80 5d       	subi	r24, 0xD0	; 208
 da2:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>

    //
    // If we were left justified, pad out the rest of the field.
    //
    if( Width < 0 )
 da6:	17 ff       	sbrs	r17, 7
 da8:	13 c0       	rjmp	.+38     	; 0xdd0 <PrintD+0x110>
 daa:	04 c0       	rjmp	.+8      	; 0xdb4 <PrintD+0xf4>
        while( ++CharsPrinted < -Width )
            PrintChar(PadChar);
 dac:	85 2d       	mov	r24, r5
 dae:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
 db2:	08 c0       	rjmp	.+16     	; 0xdc4 <PrintD+0x104>

    //
    // If we were left justified, pad out the rest of the field.
    //
    if( Width < 0 )
        while( ++CharsPrinted < -Width )
 db4:	81 2f       	mov	r24, r17
 db6:	99 27       	eor	r25, r25
 db8:	87 fd       	sbrc	r24, 7
 dba:	90 95       	com	r25
 dbc:	cc 27       	eor	r28, r28
 dbe:	dd 27       	eor	r29, r29
 dc0:	c8 1b       	sub	r28, r24
 dc2:	d9 0b       	sbc	r29, r25
 dc4:	0f 5f       	subi	r16, 0xFF	; 255
 dc6:	80 2f       	mov	r24, r16
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	8c 17       	cp	r24, r28
 dcc:	9d 07       	cpc	r25, r29
 dce:	74 f3       	brlt	.-36     	; 0xdac <PrintD+0xec>
            PrintChar(PadChar);
    }
 dd0:	df 91       	pop	r29
 dd2:	cf 91       	pop	r28
 dd4:	1f 91       	pop	r17
 dd6:	0f 91       	pop	r16
 dd8:	ff 90       	pop	r15
 dda:	ef 90       	pop	r14
 ddc:	df 90       	pop	r13
 dde:	cf 90       	pop	r12
 de0:	bf 90       	pop	r11
 de2:	af 90       	pop	r10
 de4:	9f 90       	pop	r9
 de6:	8f 90       	pop	r8
 de8:	7f 90       	pop	r7
 dea:	6f 90       	pop	r6
 dec:	5f 90       	pop	r5
 dee:	08 95       	ret

00000df0 <PrintCRLF>:
//
// Inputs:      None.
//
// Outputs:     None.
//
void PrintCRLF(void) { PrintChar('\r'); PrintChar('\n'); }
 df0:	8d e0       	ldi	r24, 0x0D	; 13
 df2:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
 df6:	8a e0       	ldi	r24, 0x0A	; 10
 df8:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
 dfc:	08 95       	ret

00000dfe <PrintStringP>:
//
// Inputs:      Text string to print
//
// Outputs:     None.
//
void PrintStringP(const char *String) {
 dfe:	cf 93       	push	r28
 e00:	df 93       	push	r29
 e02:	ec 01       	movw	r28, r24
 e04:	02 c0       	rjmp	.+4      	; 0xe0a <PrintStringP+0xc>
    char    Char;

    while( (Char = pgm_read_byte(String++)) )
        PrintChar(Char);
 e06:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
 e0a:	fe 01       	movw	r30, r28
// Outputs:     None.
//
void PrintStringP(const char *String) {
    char    Char;

    while( (Char = pgm_read_byte(String++)) )
 e0c:	21 96       	adiw	r28, 0x01	; 1
 e0e:	84 91       	lpm	r24, Z+
 e10:	88 23       	and	r24, r24
 e12:	c9 f7       	brne	.-14     	; 0xe06 <PrintStringP+0x8>
        PrintChar(Char);
    }
 e14:	df 91       	pop	r29
 e16:	cf 91       	pop	r28
 e18:	08 95       	ret

00000e1a <PrintString>:
//
// Inputs:      Text string to print
//
// Outputs:     None.
//
void PrintString(const char *String) {
 e1a:	cf 93       	push	r28
 e1c:	df 93       	push	r29
 e1e:	ec 01       	movw	r28, r24
 e20:	03 c0       	rjmp	.+6      	; 0xe28 <PrintString+0xe>

    while( *String )
        PrintChar(*String++);
 e22:	21 96       	adiw	r28, 0x01	; 1
 e24:	0e 94 20 06 	call	0xc40	; 0xc40 <PrintChar>
//
// Outputs:     None.
//
void PrintString(const char *String) {

    while( *String )
 e28:	88 81       	ld	r24, Y
 e2a:	88 23       	and	r24, r24
 e2c:	d1 f7       	brne	.-12     	; 0xe22 <PrintString+0x8>
        PrintChar(*String++);
    }
 e2e:	df 91       	pop	r29
 e30:	cf 91       	pop	r28
 e32:	08 95       	ret

00000e34 <memset>:
 e34:	dc 01       	movw	r26, r24
 e36:	01 c0       	rjmp	.+2      	; 0xe3a <memset+0x6>
 e38:	6d 93       	st	X+, r22
 e3a:	41 50       	subi	r20, 0x01	; 1
 e3c:	50 40       	sbci	r21, 0x00	; 0
 e3e:	e0 f7       	brcc	.-8      	; 0xe38 <memset+0x4>
 e40:	08 95       	ret

00000e42 <strchr>:
 e42:	fc 01       	movw	r30, r24
 e44:	81 91       	ld	r24, Z+
 e46:	86 17       	cp	r24, r22
 e48:	21 f0       	breq	.+8      	; 0xe52 <strchr+0x10>
 e4a:	88 23       	and	r24, r24
 e4c:	d9 f7       	brne	.-10     	; 0xe44 <strchr+0x2>
 e4e:	99 27       	eor	r25, r25
 e50:	08 95       	ret
 e52:	31 97       	sbiw	r30, 0x01	; 1
 e54:	cf 01       	movw	r24, r30
 e56:	08 95       	ret

00000e58 <strcpy>:
 e58:	fb 01       	movw	r30, r22
 e5a:	dc 01       	movw	r26, r24
 e5c:	01 90       	ld	r0, Z+
 e5e:	0d 92       	st	X+, r0
 e60:	00 20       	and	r0, r0
 e62:	e1 f7       	brne	.-8      	; 0xe5c <strcpy+0x4>
 e64:	08 95       	ret

00000e66 <__udivmodsi4>:
 e66:	a1 e2       	ldi	r26, 0x21	; 33
 e68:	1a 2e       	mov	r1, r26
 e6a:	aa 1b       	sub	r26, r26
 e6c:	bb 1b       	sub	r27, r27
 e6e:	fd 01       	movw	r30, r26
 e70:	0d c0       	rjmp	.+26     	; 0xe8c <__udivmodsi4_ep>

00000e72 <__udivmodsi4_loop>:
 e72:	aa 1f       	adc	r26, r26
 e74:	bb 1f       	adc	r27, r27
 e76:	ee 1f       	adc	r30, r30
 e78:	ff 1f       	adc	r31, r31
 e7a:	a2 17       	cp	r26, r18
 e7c:	b3 07       	cpc	r27, r19
 e7e:	e4 07       	cpc	r30, r20
 e80:	f5 07       	cpc	r31, r21
 e82:	20 f0       	brcs	.+8      	; 0xe8c <__udivmodsi4_ep>
 e84:	a2 1b       	sub	r26, r18
 e86:	b3 0b       	sbc	r27, r19
 e88:	e4 0b       	sbc	r30, r20
 e8a:	f5 0b       	sbc	r31, r21

00000e8c <__udivmodsi4_ep>:
 e8c:	66 1f       	adc	r22, r22
 e8e:	77 1f       	adc	r23, r23
 e90:	88 1f       	adc	r24, r24
 e92:	99 1f       	adc	r25, r25
 e94:	1a 94       	dec	r1
 e96:	69 f7       	brne	.-38     	; 0xe72 <__udivmodsi4_loop>
 e98:	60 95       	com	r22
 e9a:	70 95       	com	r23
 e9c:	80 95       	com	r24
 e9e:	90 95       	com	r25
 ea0:	9b 01       	movw	r18, r22
 ea2:	ac 01       	movw	r20, r24
 ea4:	bd 01       	movw	r22, r26
 ea6:	cf 01       	movw	r24, r30
 ea8:	08 95       	ret

00000eaa <isupper>:
 eaa:	85 fd       	sbrc	r24, 5
 eac:	22 c0       	rjmp	.+68     	; 0xef2 <__ctype_isfalse>

00000eae <isalpha>:
 eae:	80 62       	ori	r24, 0x20	; 32

00000eb0 <islower>:
 eb0:	91 11       	cpse	r25, r1
 eb2:	1f c0       	rjmp	.+62     	; 0xef2 <__ctype_isfalse>
 eb4:	81 56       	subi	r24, 0x61	; 97
 eb6:	8a 51       	subi	r24, 0x1A	; 26
 eb8:	e0 f7       	brcc	.-8      	; 0xeb2 <islower+0x2>
 eba:	08 95       	ret

00000ebc <isxdigit>:
 ebc:	91 11       	cpse	r25, r1
 ebe:	19 c0       	rjmp	.+50     	; 0xef2 <__ctype_isfalse>
 ec0:	80 53       	subi	r24, 0x30	; 48
 ec2:	8a 50       	subi	r24, 0x0A	; 10
 ec4:	28 f0       	brcs	.+10     	; 0xed0 <isxdigit+0x14>
 ec6:	86 5c       	subi	r24, 0xC6	; 198
 ec8:	80 62       	ori	r24, 0x20	; 32
 eca:	81 56       	subi	r24, 0x61	; 97
 ecc:	86 50       	subi	r24, 0x06	; 6
 ece:	b8 f7       	brcc	.-18     	; 0xebe <isxdigit+0x2>
 ed0:	08 95       	ret

00000ed2 <tolower>:
 ed2:	91 11       	cpse	r25, r1
 ed4:	08 95       	ret
 ed6:	81 54       	subi	r24, 0x41	; 65
 ed8:	8a 51       	subi	r24, 0x1A	; 26
 eda:	08 f4       	brcc	.+2      	; 0xede <tolower+0xc>
 edc:	80 5e       	subi	r24, 0xE0	; 224
 ede:	85 5a       	subi	r24, 0xA5	; 165
 ee0:	08 95       	ret

00000ee2 <toupper>:
 ee2:	91 11       	cpse	r25, r1
 ee4:	08 95       	ret
 ee6:	81 56       	subi	r24, 0x61	; 97
 ee8:	8a 51       	subi	r24, 0x1A	; 26
 eea:	08 f4       	brcc	.+2      	; 0xeee <toupper+0xc>
 eec:	80 52       	subi	r24, 0x20	; 32
 eee:	85 58       	subi	r24, 0x85	; 133
 ef0:	08 95       	ret

00000ef2 <__ctype_isfalse>:
 ef2:	99 27       	eor	r25, r25
 ef4:	88 27       	eor	r24, r24

00000ef6 <__ctype_istrue>:
 ef6:	08 95       	ret

00000ef8 <_exit>:
 ef8:	f8 94       	cli

00000efa <__stop_program>:
 efa:	ff cf       	rjmp	.-2      	; 0xefa <__stop_program>
